[
  {
    "name": "ExternalAPIsUsedWithUntrustedData.ql",
    "path": "javascript/ql/src/Security/CWE-020/ExternalAPIsUsedWithUntrustedData.ql",
    "language": "javascript",
    "size": 746,
    "content": "/**\n * @name Frequency counts for external APIs that are used with untrusted data\n * @description This reports the external APIs that are used with untrusted data, along with how\n *              frequently the API is called, and how many unique sources of untrusted data flow\n *              to it.\n * @id js/count-untrusted-data-external-api\n * @kind table\n * @tags security external/cwe/cwe-020\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.ExternalAPIUsedWithUntrustedDataQuery\n\nfrom ExternalApiUsedWithUntrustedData externalApi\nselect externalApi, count(externalApi.getUntrustedDataNode()) as numberOfUses,\n  externalApi.getNumberOfUntrustedSources() as numberOfUntrustedSources order by\n    numberOfUntrustedSources desc\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/ExternalAPIsUsedWithUntrustedData.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "IncompleteHostnameRegExp.ql",
    "path": "javascript/ql/src/Security/CWE-020/IncompleteHostnameRegExp.ql",
    "language": "javascript",
    "size": 582,
    "content": "/**\n * @name Incomplete regular expression for hostnames\n * @description Matching a URL or hostname against a regular expression that contains an unescaped dot as part of the hostname might match more hostnames than expected.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.8\n * @precision high\n * @id js/incomplete-hostname-regexp\n * @tags correctness\n *       security\n *       external/cwe/cwe-020\n */\n\nprivate import semmle.javascript.security.regexp.HostnameRegexp as HostnameRegexp\n\nquery predicate problems = HostnameRegexp::incompleteHostnameRegExp/4;\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/IncompleteHostnameRegExp.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "IncompleteUrlSchemeCheck.ql",
    "path": "javascript/ql/src/Security/CWE-020/IncompleteUrlSchemeCheck.ql",
    "language": "javascript",
    "size": 4296,
    "content": "/**\n * @name Incomplete URL scheme check\n * @description Checking for the \"javascript:\" URL scheme without also checking for \"vbscript:\"\n *              and \"data:\" suggests a logic error or even a security vulnerability.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.8\n * @precision high\n * @id js/incomplete-url-scheme-check\n * @tags security\n *       correctness\n *       external/cwe/cwe-020\n *       external/cwe/cwe-184\n */\n\nimport javascript\nimport semmle.javascript.security.IncompleteBlacklistSanitizer as IncompleteBlacklistSanitizer\n\n/** A URL scheme that can be used to represent executable code. */\nclass DangerousScheme extends string {\n  DangerousScheme() { this = \"data:\" or this = \"javascript:\" or this = \"vbscript:\" }\n\n  /** Gets the name of this scheme without the `:`. */\n  string getWithoutColon() { this = result + \":\" }\n\n  /** Gets the name of this scheme, with or without the `:`. */\n  string getWithOrWithoutColon() { result = this or result = this.getWithoutColon() }\n}\n\n/** Returns a node that refers to the scheme of `url`. */\nDataFlow::SourceNode schemeOf(DataFlow::Node url) {\n  // url.split(\":\")[0]\n  exists(StringSplitCall split |\n    split.getSeparator() = \":\" and\n    result = split.getASubstringRead(0) and\n    url = split.getBaseString()\n  )\n  or\n  // url.getScheme(), url.getProtocol(), getScheme(url), getProtocol(url)\n  exists(DataFlow::CallNode call |\n    result = call and\n    (call.getCalleeName() = \"getScheme\" or call.getCalleeName() = \"getProtocol\")\n  |\n    call.getNumArgument() = 1 and\n    url = call.getArgument(0)\n    or\n    call.getNumArgument() = 0 and\n    url = call.getReceiver()\n  )\n  or\n  // url.scheme, url.protocol\n  exists(DataFlow::PropRead prop |\n    result = prop and\n    (prop.getPropertyName() = \"scheme\" or prop.getPropertyName() = \"protocol\") and\n    url = prop.getBase()\n  )\n}\n\n/**\n * A chain of replace calls that replaces one or more dangerous schemes.\n */\nclass SchemeReplacementChain extends IncompleteBlac",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/IncompleteUrlSchemeCheck.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "IncompleteUrlSubstringSanitization.ql",
    "path": "javascript/ql/src/Security/CWE-020/IncompleteUrlSubstringSanitization.ql",
    "language": "javascript",
    "size": 410,
    "content": "/**\n * @name Incomplete URL substring sanitization\n * @description Security checks on the substrings of an unparsed URL are often vulnerable to bypassing.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.8\n * @precision high\n * @id js/incomplete-url-substring-sanitization\n * @tags correctness\n *       security\n *       external/cwe/cwe-020\n */\n\nimport IncompleteUrlSubstringSanitization\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/IncompleteUrlSubstringSanitization.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "IncorrectSuffixCheck.ql",
    "path": "javascript/ql/src/Security/CWE-020/IncorrectSuffixCheck.ql",
    "language": "javascript",
    "size": 6513,
    "content": "/**\n * @name Incorrect suffix check\n * @description Using indexOf to implement endsWith functionality is error-prone if the -1 case is not explicitly handled.\n * @kind problem\n * @problem.severity error\n * @security-severity 7.8\n * @precision high\n * @id js/incorrect-suffix-check\n * @tags security\n *       correctness\n *       external/cwe/cwe-020\n */\n\nimport javascript\n\n/**\n * A call to `indexOf` or `lastIndexOf`.\n */\nclass IndexOfCall extends DataFlow::MethodCallNode {\n  IndexOfCall() {\n    exists(string name | name = this.getMethodName() |\n      name = \"indexOf\" or\n      name = \"lastIndexOf\"\n    ) and\n    this.getNumArgument() = 1\n  }\n\n  /** Gets the receiver or argument of this call. */\n  DataFlow::Node getAnOperand() {\n    result = this.getReceiver() or\n    result = this.getArgument(0)\n  }\n\n  /**\n   * Holds if `recv` is the local source of the receiver of this call, and `m`\n   * is the name of the invoked method.\n   */\n  private predicate receiverAndMethodName(DataFlow::Node recv, string m) {\n    this.getReceiver().getALocalSource() = recv and\n    this.getMethodName() = m\n  }\n\n  /**\n   * Gets an `indexOf` call with the same receiver, argument, and method name, including this call itself.\n   */\n  IndexOfCall getAnEquivalentIndexOfCall() {\n    result = this\n    or\n    exists(DataFlow::Node recv, string m |\n      this.receiverAndMethodName(recv, m) and result.receiverAndMethodName(recv, m)\n    |\n      // both directly reference the same value\n      result.getArgument(0).getALocalSource() = this.getArgument(0).getALocalSource()\n      or\n      // both use the same string literal\n      result.getArgument(0).getStringValue() = this.getArgument(0).getStringValue()\n      or\n      // both use the same concatenation of a string and a value\n      exists(Expr origin, StringLiteral str, AddExpr otherAdd |\n        this.getArgument(0).asExpr().(AddExpr).hasOperands(origin, str) and\n        otherAdd = result.getArgument(0).asExpr()\n      |\n        otherAdd.getAnOperand().(Strin",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/IncorrectSuffixCheck.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "MissingOriginCheck.ql",
    "path": "javascript/ql/src/Security/CWE-020/MissingOriginCheck.ql",
    "language": "javascript",
    "size": 3048,
    "content": "/**\n * @name Missing origin verification in `postMessage` handler\n * @description Missing origin verification in a `postMessage` handler allows any windows to send arbitrary data to the handler.\n * @kind problem\n * @problem.severity warning\n * @security-severity 5\n * @precision medium\n * @id js/missing-origin-check\n * @tags correctness\n *       security\n *       external/cwe/cwe-020\n *       external/cwe/cwe-940\n */\n\nimport javascript\n\n/** A function that handles \"message\" events. */\nclass PostMessageHandler extends DataFlow::FunctionNode {\n  override PostMessageEventHandler astNode;\n\n  /** Gets the parameter that contains the event. */\n  DataFlow::ParameterNode getEventParameter() {\n    result = DataFlow::parameterNode(astNode.getEventParameter())\n  }\n}\n\n/** Gets a reference to the event from a postmessage `handler` */\nDataFlow::SourceNode event(DataFlow::TypeTracker t, PostMessageHandler handler) {\n  t.start() and\n  result = handler.getEventParameter()\n  or\n  exists(DataFlow::TypeTracker t2 | result = event(t2, handler).track(t2, t))\n}\n\n/** Gets a reference to the .origin from a postmessage event. */\nDataFlow::SourceNode origin(DataFlow::TypeTracker t, PostMessageHandler handler) {\n  t.start() and\n  result = event(DataFlow::TypeTracker::end(), handler).getAPropertyRead(\"origin\")\n  or\n  result =\n    origin(t.continue(), handler)\n        .getAMethodCall([\n            \"toString\", \"toLowerCase\", \"toUpperCase\", \"toLocaleLowerCase\", \"toLocaleUpperCase\"\n          ])\n  or\n  exists(DataFlow::TypeTracker t2 | result = origin(t2, handler).track(t2, t))\n}\n\n/** Gets a reference to the .source from a postmessage event. */\nDataFlow::SourceNode source(DataFlow::TypeTracker t, PostMessageHandler handler) {\n  t.start() and\n  result = event(DataFlow::TypeTracker::end(), handler).getAPropertyRead(\"source\")\n  or\n  exists(DataFlow::TypeTracker t2 | result = source(t2, handler).track(t2, t))\n}\n\n/** Gets a reference to the origin or the source of a postmessage event. */\nDataFlow::SourceN",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/MissingOriginCheck.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "MissingRegExpAnchor.ql",
    "path": "javascript/ql/src/Security/CWE-020/MissingRegExpAnchor.ql",
    "language": "javascript",
    "size": 1729,
    "content": "/**\n * @name Missing regular expression anchor\n * @description Regular expressions without anchors can be vulnerable to bypassing.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.8\n * @precision medium\n * @id js/regex/missing-regexp-anchor\n * @tags correctness\n *       security\n *       external/cwe/cwe-020\n */\n\nprivate import javascript\nprivate import semmle.javascript.security.regexp.HostnameRegexp as HostnameRegexp\nprivate import codeql.regex.MissingRegExpAnchor as MissingRegExpAnchor\nprivate import semmle.javascript.security.regexp.RegExpTreeView::RegExpTreeView as TreeImpl\n\nprivate module Impl implements\n  MissingRegExpAnchor::MissingRegExpAnchorSig<TreeImpl, HostnameRegexp::Impl>\n{\n  predicate isUsedAsReplace(RegExpPatternSource pattern) {\n    // is used for capture or replace\n    exists(DataFlow::MethodCallNode mcn, string name | name = mcn.getMethodName() |\n      name = \"exec\" and\n      mcn = pattern.getARegExpObject().getAMethodCall() and\n      exists(mcn.getAPropertyRead())\n      or\n      exists(DataFlow::Node arg |\n        arg = mcn.getArgument(0) and\n        (\n          pattern.getARegExpObject().flowsTo(arg) or\n          pattern.getAParse() = arg\n        )\n      |\n        name = \"replace\"\n        or\n        name = [\"match\", \"matchAll\"] and exists(mcn.getAPropertyRead())\n      )\n    )\n  }\n\n  string getEndAnchorText() { result = \"$\" }\n}\n\nimport MissingRegExpAnchor::Make<TreeImpl, HostnameRegexp::Impl, Impl>\n\nfrom DataFlow::Node nd, string msg\nwhere\n  isUnanchoredHostnameRegExp(nd, msg)\n  or\n  isSemiAnchoredHostnameRegExp(nd, msg)\n  or\n  hasMisleadingAnchorPrecedence(nd, msg)\n// isLineAnchoredHostnameRegExp is not used here, as it is not relevant to JS.\nselect nd, msg\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/MissingRegExpAnchor.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "OverlyLargeRange.ql",
    "path": "javascript/ql/src/Security/CWE-020/OverlyLargeRange.ql",
    "language": "javascript",
    "size": 736,
    "content": "/**\n * @name Overly permissive regular expression range\n * @description Overly permissive regular expression ranges match a wider range of characters than intended.\n *              This may allow an attacker to bypass a filter or sanitizer.\n * @kind problem\n * @problem.severity warning\n * @security-severity 5.0\n * @precision high\n * @id js/overly-large-range\n * @tags correctness\n *       security\n *       external/cwe/cwe-020\n */\n\nprivate import semmle.javascript.security.regexp.RegExpTreeView::RegExpTreeView as TreeView\nimport codeql.regex.OverlyLargeRangeQuery::Make<TreeView>\n\nfrom TreeView::RegExpCharacterRange range, string reason\nwhere problem(range, reason)\nselect range, \"Suspicious character range that \" + reason + \".\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/OverlyLargeRange.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "UntrustedDataToExternalAPI.ql",
    "path": "javascript/ql/src/Security/CWE-020/UntrustedDataToExternalAPI.ql",
    "language": "javascript",
    "size": 829,
    "content": "/**\n * @name Untrusted data passed to external API\n * @description Data provided remotely is used in this external API without sanitization, which could be a security risk.\n * @id js/untrusted-data-to-external-api\n * @kind path-problem\n * @precision low\n * @problem.severity error\n * @security-severity 7.8\n * @tags security external/cwe/cwe-020\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.ExternalAPIUsedWithUntrustedDataQuery\nimport ExternalAPIUsedWithUntrustedDataFlow::PathGraph\n\nfrom\n  ExternalAPIUsedWithUntrustedDataFlow::PathNode source,\n  ExternalAPIUsedWithUntrustedDataFlow::PathNode sink\nwhere ExternalAPIUsedWithUntrustedDataFlow::flowPath(source, sink)\nselect sink, source, sink,\n  \"Call to \" + sink.getNode().(Sink).getApiName() + \" with untrusted data from $@.\", source,\n  source.toString()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/UntrustedDataToExternalAPI.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "UselessRegExpCharacterEscape.ql",
    "path": "javascript/ql/src/Security/CWE-020/UselessRegExpCharacterEscape.ql",
    "language": "javascript",
    "size": 5045,
    "content": "/**\n * @name Useless regular-expression character escape\n * @description Prepending a backslash to an ordinary character in a string\n *              does not have any effect, and may make regular expressions constructed from this string\n *              behave unexpectedly.\n * @kind problem\n * @problem.severity error\n * @security-severity 7.8\n * @precision high\n * @id js/useless-regexp-character-escape\n * @tags correctness\n *       security\n *       external/cwe/cwe-020\n */\n\nimport javascript\nimport semmle.javascript.CharacterEscapes::CharacterEscapes\n\nnewtype TRegExpPatternMistake =\n  /**\n   * A character escape mistake in regular expression string `src`\n   * for the character `char` at `index` in `rawStringNode`, explained\n   * by `mistake`.\n   */\n  TIdentityEscapeInStringMistake(\n    RegExpPatternSource src, string char, string mistake, AstNode rawStringNode, int index\n  ) {\n    char = getALikelyRegExpPatternMistake(src, mistake, rawStringNode, index)\n  } or\n  /**\n   * A backslash-escaped 'b' at `index` of `rawStringNode` in the\n   * regular expression string `src`, indicating intent to use the\n   * word-boundary assertion '\\b'.\n   */\n  TBackspaceInStringMistake(RegExpPatternSource src, AstNode rawStringNode, int index) {\n    exists(string raw, string cooked |\n      exists(StringLiteral lit | lit = rawStringNode |\n        rawStringNode = src.asExpr() and\n        raw = lit.getRawValue() and\n        cooked = lit.getStringValue()\n      )\n      or\n      exists(TemplateElement elem | elem = rawStringNode |\n        rawStringNode = src.asExpr().(TemplateLiteral).getAnElement() and\n        raw = elem.getRawValue() and\n        cooked = elem.getStringValue()\n      )\n    |\n      \"b\" = getAnEscapedCharacter(raw, index) and\n      // except if the string is exactly \\b\n      cooked.length() != 1\n    )\n  }\n\n/**\n * A character escape mistake in a regular expression string.\n *\n * Implementation note: the main purpose of this class is to associate an\n * exact character location with",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-020/UselessRegExpCharacterEscape.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-020"
  },
  {
    "name": "TaintedPath.ql",
    "path": "javascript/ql/src/Security/CWE-022/TaintedPath.ql",
    "language": "javascript",
    "size": 880,
    "content": "/**\n * @name Uncontrolled data used in path expression\n * @description Accessing paths influenced by users can allow an attacker to access\n *              unexpected resources.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 7.5\n * @precision high\n * @id js/path-injection\n * @tags security\n *       external/cwe/cwe-022\n *       external/cwe/cwe-023\n *       external/cwe/cwe-036\n *       external/cwe/cwe-073\n *       external/cwe/cwe-099\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.TaintedPathQuery\nimport DataFlow::DeduplicatePathGraph<TaintedPathFlow::PathNode, TaintedPathFlow::PathGraph>\n\nfrom PathNode source, PathNode sink\nwhere TaintedPathFlow::flowPath(source.getAnOriginalPathNode(), sink.getAnOriginalPathNode())\nselect sink.getNode(), source, sink, \"This path depends on a $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-022/TaintedPath.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-022"
  },
  {
    "name": "ZipSlip.ql",
    "path": "javascript/ql/src/Security/CWE-022/ZipSlip.ql",
    "language": "javascript",
    "size": 949,
    "content": "/**\n * @name Arbitrary file access during archive extraction (\"Zip Slip\")\n * @description Extracting files from a malicious ZIP file, or similar type of archive, without\n *              validating that the destination file path is within the destination directory\n *              can allow an attacker to unexpectedly gain access to resources.\n * @kind path-problem\n * @id js/zipslip\n * @problem.severity error\n * @security-severity 7.5\n * @precision high\n * @tags security\n *       external/cwe/cwe-022\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.ZipSlipQuery\nimport DataFlow::DeduplicatePathGraph<ZipSlipFlow::PathNode, ZipSlipFlow::PathGraph>\n\nfrom PathNode source, PathNode sink\nwhere ZipSlipFlow::flowPath(source.getAnOriginalPathNode(), sink.getAnOriginalPathNode())\nselect source.getNode(), source, sink,\n  \"Unsanitized archive entry, which may contain '..', is used in a $@.\", sink.getNode(),\n  \"file system operation\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-022/ZipSlip.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-022"
  },
  {
    "name": "TemplateObjectInjection.ql",
    "path": "javascript/ql/src/Security/CWE-073/TemplateObjectInjection.ql",
    "language": "javascript",
    "size": 861,
    "content": "/**\n * @name Template Object Injection\n * @description Instantiating a template using a user-controlled object is vulnerable to local file read and potential remote code execution.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 9.3\n * @precision high\n * @id js/template-object-injection\n * @tags security\n *       external/cwe/cwe-073\n *       external/cwe/cwe-094\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.TemplateObjectInjectionQuery\nimport DataFlow::DeduplicatePathGraph<TemplateObjectInjectionFlow::PathNode, TemplateObjectInjectionFlow::PathGraph>\n\nfrom PathNode source, PathNode sink\nwhere\n  TemplateObjectInjectionFlow::flowPath(source.getAnOriginalPathNode(), sink.getAnOriginalPathNode())\nselect sink.getNode(), source, sink, \"Template object depends on a $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-073/TemplateObjectInjection.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-073"
  },
  {
    "name": "CommandInjection.ql",
    "path": "javascript/ql/src/Security/CWE-078/CommandInjection.ql",
    "language": "javascript",
    "size": 1024,
    "content": "/**\n * @name Uncontrolled command line\n * @description Using externally controlled strings in a command line may allow a malicious\n *              user to change the meaning of the command.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 9.8\n * @precision high\n * @id js/command-line-injection\n * @tags correctness\n *       security\n *       external/cwe/cwe-078\n *       external/cwe/cwe-088\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.CommandInjectionQuery\nimport CommandInjectionFlow::PathGraph\n\nfrom\n  CommandInjectionFlow::PathNode source, CommandInjectionFlow::PathNode sink,\n  DataFlow::Node highlight, Source sourceNode\nwhere\n  CommandInjectionFlow::flowPath(source, sink) and\n  (\n    if isSinkWithHighlight(sink.getNode(), _)\n    then isSinkWithHighlight(sink.getNode(), highlight)\n    else highlight = sink.getNode()\n  ) and\n  sourceNode = source.getNode()\nselect highlight, source, sink, \"This command line depends on a $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-078/CommandInjection.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-078"
  },
  {
    "name": "IndirectCommandInjection.ql",
    "path": "javascript/ql/src/Security/CWE-078/IndirectCommandInjection.ql",
    "language": "javascript",
    "size": 1143,
    "content": "/**\n * @name Indirect uncontrolled command line\n * @description Forwarding command-line arguments to a child process\n *              executed within a shell may indirectly introduce\n *              command-line injection vulnerabilities.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 6.3\n * @precision medium\n * @id js/indirect-command-line-injection\n * @tags correctness\n *       security\n *       external/cwe/cwe-078\n *       external/cwe/cwe-088\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.IndirectCommandInjectionQuery\nimport IndirectCommandInjectionFlow::PathGraph\n\nfrom\n  IndirectCommandInjectionFlow::PathNode source, IndirectCommandInjectionFlow::PathNode sink,\n  DataFlow::Node highlight\nwhere\n  IndirectCommandInjectionFlow::flowPath(source, sink) and\n  if IndirectCommandInjectionConfig::isSinkWithHighlight(sink.getNode(), _)\n  then IndirectCommandInjectionConfig::isSinkWithHighlight(sink.getNode(), highlight)\n  else highlight = sink.getNode()\nselect highlight, source, sink, \"This command depends on an unsanitized $@.\", source.getNode(),\n  source.getNode().(Source).describe()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-078/IndirectCommandInjection.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-078"
  },
  {
    "name": "SecondOrderCommandInjection.ql",
    "path": "javascript/ql/src/Security/CWE-078/SecondOrderCommandInjection.ql",
    "language": "javascript",
    "size": 1133,
    "content": "/**\n * @name Second order command injection\n * @description Using user-controlled data as arguments to some commands, such as git clone,\n *              can allow arbitrary commands to be executed.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 7.0\n * @precision high\n * @id js/second-order-command-line-injection\n * @tags correctness\n *       security\n *       external/cwe/cwe-078\n *       external/cwe/cwe-088\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.SecondOrderCommandInjectionQuery\nimport DataFlow::DeduplicatePathGraph<SecondOrderCommandInjectionFlow::PathNode, SecondOrderCommandInjectionFlow::PathGraph>\n\nfrom PathNode source, PathNode sink, Sink sinkNode\nwhere\n  SecondOrderCommandInjectionFlow::flowPath(source.getAnOriginalPathNode(),\n    sink.getAnOriginalPathNode()) and\n  sinkNode = sink.getNode()\nselect sink.getNode(), source, sink,\n  \"Command line argument that depends on $@ can execute an arbitrary command if \" +\n    sinkNode.getVulnerableArgumentExample() + \" is used with \" + sinkNode.getCommand() + \".\",\n  source.getNode(), source.getNode().(Source).describe()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-078/SecondOrderCommandInjection.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-078"
  },
  {
    "name": "ShellCommandInjectionFromEnvironment.ql",
    "path": "javascript/ql/src/Security/CWE-078/ShellCommandInjectionFromEnvironment.ql",
    "language": "javascript",
    "size": 1250,
    "content": "/**\n * @name Shell command built from environment values\n * @description Building a shell command string with values from the enclosing\n *              environment may cause subtle bugs or vulnerabilities.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 6.3\n * @precision high\n * @id js/shell-command-injection-from-environment\n * @tags correctness\n *       security\n *       external/cwe/cwe-078\n *       external/cwe/cwe-088\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.ShellCommandInjectionFromEnvironmentQuery\nimport ShellCommandInjectionFromEnvironmentFlow::PathGraph\n\nfrom\n  ShellCommandInjectionFromEnvironmentFlow::PathNode source,\n  ShellCommandInjectionFromEnvironmentFlow::PathNode sink, DataFlow::Node highlight,\n  Source sourceNode\nwhere\n  sourceNode = source.getNode() and\n  ShellCommandInjectionFromEnvironmentFlow::flowPath(source, sink) and\n  if ShellCommandInjectionFromEnvironmentConfig::isSinkWithHighlight(sink.getNode(), _)\n  then ShellCommandInjectionFromEnvironmentConfig::isSinkWithHighlight(sink.getNode(), highlight)\n  else highlight = sink.getNode()\nselect highlight, source, sink, \"This shell command depends on an uncontrolled $@.\", sourceNode,\n  sourceNode.getSourceType()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-078/ShellCommandInjectionFromEnvironment.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-078"
  },
  {
    "name": "UnsafeShellCommandConstruction.ql",
    "path": "javascript/ql/src/Security/CWE-078/UnsafeShellCommandConstruction.ql",
    "language": "javascript",
    "size": 1053,
    "content": "/**\n * @name Unsafe shell command constructed from library input\n * @description Using externally controlled strings in a command line may allow a malicious\n *              user to change the meaning of the command.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 6.3\n * @precision high\n * @id js/shell-command-constructed-from-input\n * @tags correctness\n *       security\n *       external/cwe/cwe-078\n *       external/cwe/cwe-088\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.UnsafeShellCommandConstructionQuery\nimport UnsafeShellCommandConstructionFlow::PathGraph\n\nfrom\n  UnsafeShellCommandConstructionFlow::PathNode source,\n  UnsafeShellCommandConstructionFlow::PathNode sink, Sink sinkNode\nwhere UnsafeShellCommandConstructionFlow::flowPath(source, sink) and sinkNode = sink.getNode()\nselect sinkNode.getAlertLocation(), source, sink,\n  \"This \" + sinkNode.getSinkType() + \" which depends on $@ is later used in a $@.\",\n  source.getNode(), \"library input\", sinkNode.getCommandExecution(), \"shell command\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-078/UnsafeShellCommandConstruction.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-078"
  },
  {
    "name": "UselessUseOfCat.ql",
    "path": "javascript/ql/src/Security/CWE-078/UselessUseOfCat.ql",
    "language": "javascript",
    "size": 983,
    "content": "/**\n * @name Unnecessary use of `cat` process\n * @description Using the  `cat` process to read a file is unnecessarily complex, inefficient, unportable, and can lead to subtle bugs, or even security vulnerabilities.\n * @kind problem\n * @problem.severity error\n * @security-severity 6.3\n * @precision high\n * @id js/unnecessary-use-of-cat\n * @tags correctness\n *       security\n *       maintainability\n *       external/cwe/cwe-078\n */\n\nimport javascript\nimport semmle.javascript.security.UselessUseOfCat\nimport semmle.javascript.RestrictedLocations\n\nfrom UselessCat cat, string message\nwhere\n  message = \" Can be replaced with: \" + PrettyPrintCatCall::createReadFileCall(cat)\n  or\n  not exists(PrettyPrintCatCall::createReadFileCall(cat)) and\n  if cat.isSync()\n  then message = \" Can be replaced with a call to fs.readFileSync(..).\"\n  else message = \" Can be replaced with a call to fs.readFile(..).\"\nselect cat.asExpr().(FirstLineOf), \"Unnecessary use of `cat` process.\" + message\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-078/UselessUseOfCat.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-078"
  },
  {
    "name": "ExceptionXss.ql",
    "path": "javascript/ql/src/Security/CWE-079/ExceptionXss.ql",
    "language": "javascript",
    "size": 862,
    "content": "/**\n * @name Exception text reinterpreted as HTML\n * @description Reinterpreting text from an exception as HTML\n *              can lead to a cross-site scripting vulnerability.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 6.1\n * @precision high\n * @id js/xss-through-exception\n * @tags security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.ExceptionXssQuery\nimport DataFlow::DeduplicatePathGraph<ExceptionXssFlow::PathNode, ExceptionXssFlow::PathGraph>\n\nfrom PathNode source, PathNode sink\nwhere ExceptionXssFlow::flowPath(source.getAnOriginalPathNode(), sink.getAnOriginalPathNode())\nselect sink.getNode(), source, sink,\n  \"$@ is reinterpreted as HTML without escaping meta-characters.\", source.getNode(),\n  source.getNode().(Source).getDescription()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-079/ExceptionXss.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-079"
  },
  {
    "name": "ReflectedXss.ql",
    "path": "javascript/ql/src/Security/CWE-079/ReflectedXss.ql",
    "language": "javascript",
    "size": 738,
    "content": "/**\n * @name Reflected cross-site scripting\n * @description Writing user input directly to an HTTP response allows for\n *              a cross-site scripting vulnerability.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 7.8\n * @precision high\n * @id js/reflected-xss\n * @tags security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.ReflectedXssQuery\nimport ReflectedXssFlow::PathGraph\n\nfrom ReflectedXssFlow::PathNode source, ReflectedXssFlow::PathNode sink\nwhere ReflectedXssFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"Cross-site scripting vulnerability due to a $@.\",\n  source.getNode(), \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-079/ReflectedXss.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-079"
  },
  {
    "name": "StoredXss.ql",
    "path": "javascript/ql/src/Security/CWE-079/StoredXss.ql",
    "language": "javascript",
    "size": 715,
    "content": "/**\n * @name Stored cross-site scripting\n * @description Using uncontrolled stored values in HTML allows for\n *              a stored cross-site scripting vulnerability.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 7.8\n * @precision high\n * @id js/stored-xss\n * @tags security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.StoredXssQuery\nimport StoredXssFlow::PathGraph\n\nfrom StoredXssFlow::PathNode source, StoredXssFlow::PathNode sink\nwhere StoredXssFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"Stored cross-site scripting vulnerability due to $@.\",\n  source.getNode(), \"stored value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-079/StoredXss.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-079"
  },
  {
    "name": "UnsafeHtmlConstruction.ql",
    "path": "javascript/ql/src/Security/CWE-079/UnsafeHtmlConstruction.ql",
    "language": "javascript",
    "size": 1037,
    "content": "/**\n * @name Unsafe HTML constructed from library input\n * @description Using externally controlled strings to construct HTML might allow a malicious\n *              user to perform a cross-site scripting attack.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 6.1\n * @precision high\n * @id js/html-constructed-from-input\n * @tags security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.UnsafeHtmlConstructionQuery\nimport DataFlow::DeduplicatePathGraph<UnsafeHtmlConstructionFlow::PathNode, UnsafeHtmlConstructionFlow::PathGraph>\n\nfrom PathNode source, PathNode sink, Sink sinkNode\nwhere\n  UnsafeHtmlConstructionFlow::flowPath(source.getAnOriginalPathNode(), sink.getAnOriginalPathNode()) and\n  sink.getNode() = sinkNode\nselect sinkNode, source, sink,\n  \"This \" + sinkNode.describe() + \" which depends on $@ might later allow $@.\", source.getNode(),\n  \"library input\", sinkNode.getSink(), sinkNode.getVulnerabilityKind().toLowerCase()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-079/UnsafeHtmlConstruction.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-079"
  },
  {
    "name": "UnsafeJQueryPlugin.ql",
    "path": "javascript/ql/src/Security/CWE-079/UnsafeJQueryPlugin.ql",
    "language": "javascript",
    "size": 893,
    "content": "/**\n * @name Unsafe jQuery plugin\n * @description A jQuery plugin that unintentionally constructs HTML from some of its options may be unsafe to use for clients.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 6.1\n * @precision high\n * @id js/unsafe-jquery-plugin\n * @tags security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n *       frameworks/jquery\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.UnsafeJQueryPluginQuery\nimport UnsafeJQueryPluginFlow::PathGraph\n\nfrom\n  UnsafeJQueryPluginFlow::PathNode source, UnsafeJQueryPluginFlow::PathNode sink,\n  JQuery::JQueryPluginMethod plugin\nwhere\n  UnsafeJQueryPluginFlow::flowPath(source, sink) and\n  source.getNode().(Source).getPlugin() = plugin\nselect sink.getNode(), source, sink, \"Potential XSS vulnerability in the $@.\", plugin,\n  \"'$.fn.\" + plugin.getPluginName() + \"' plugin\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-079/UnsafeJQueryPlugin.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-079"
  },
  {
    "name": "Xss.ql",
    "path": "javascript/ql/src/Security/CWE-079/Xss.ql",
    "language": "javascript",
    "size": 816,
    "content": "/**\n * @name Client-side cross-site scripting\n * @description Writing user input directly to the DOM allows for\n *              a cross-site scripting vulnerability.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 7.8\n * @precision high\n * @id js/xss\n * @tags security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.DomBasedXssQuery\nimport DataFlow::DeduplicatePathGraph<DomBasedXssFlow::PathNode, DomBasedXssFlow::PathGraph>\n\nfrom PathNode source, PathNode sink\nwhere DomBasedXssFlow::flowPath(source.getAnOriginalPathNode(), sink.getAnOriginalPathNode())\nselect sink.getNode(), source, sink,\n  sink.getNode().(Sink).getVulnerabilityKind() + \" vulnerability due to $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-079/Xss.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-079"
  },
  {
    "name": "XssThroughDom.ql",
    "path": "javascript/ql/src/Security/CWE-079/XssThroughDom.ql",
    "language": "javascript",
    "size": 814,
    "content": "/**\n * @name DOM text reinterpreted as HTML\n * @description Reinterpreting text from the DOM as HTML\n *              can lead to a cross-site scripting vulnerability.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 6.1\n * @precision high\n * @id js/xss-through-dom\n * @tags security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.XssThroughDomQuery\nimport XssThroughDomFlow::PathGraph\n\nfrom XssThroughDomFlow::PathNode source, XssThroughDomFlow::PathNode sink\nwhere\n  XssThroughDomFlow::flowPath(source, sink) and\n  not isIgnoredSourceSinkPair(source.getNode(), sink.getNode())\nselect sink.getNode(), source, sink,\n  \"$@ is reinterpreted as HTML without escaping meta-characters.\", source.getNode(), \"DOM text\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-079/XssThroughDom.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-079"
  },
  {
    "name": "SqlInjection.ql",
    "path": "javascript/ql/src/Security/CWE-089/SqlInjection.ql",
    "language": "javascript",
    "size": 1352,
    "content": "/**\n * @name Database query built from user-controlled sources\n * @description Building a database query from user-controlled sources is vulnerable to insertion of\n *              malicious code by the user.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 8.8\n * @precision high\n * @id js/sql-injection\n * @tags security\n *       external/cwe/cwe-089\n *       external/cwe/cwe-090\n *       external/cwe/cwe-943\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.SqlInjectionQuery as Sql\nimport semmle.javascript.security.dataflow.NosqlInjectionQuery as Nosql\n\nmodule Merged =\n  DataFlow::MergePathGraph<Sql::SqlInjectionFlow::PathNode, Nosql::NosqlInjectionFlow::PathNode,\n    Sql::SqlInjectionFlow::PathGraph, Nosql::NosqlInjectionFlow::PathGraph>;\n\nimport DataFlow::DeduplicatePathGraph<Merged::PathNode, Merged::PathGraph>\n\nfrom PathNode source, PathNode sink, string type\nwhere\n  Sql::SqlInjectionFlow::flowPath(source.getAnOriginalPathNode().asPathNode1(),\n    sink.getAnOriginalPathNode().asPathNode1()) and\n  type = \"string\"\n  or\n  Nosql::NosqlInjectionFlow::flowPath(source.getAnOriginalPathNode().asPathNode2(),\n    sink.getAnOriginalPathNode().asPathNode2()) and\n  type = \"object\"\nselect sink.getNode(), source, sink, \"This query \" + type + \" depends on a $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-089/SqlInjection.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-089"
  },
  {
    "name": "CodeInjection.ql",
    "path": "javascript/ql/src/Security/CWE-094/CodeInjection.ql",
    "language": "javascript",
    "size": 798,
    "content": "/**\n * @name Code injection\n * @description Interpreting unsanitized user input as code allows a malicious user arbitrary\n *              code execution.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 9.3\n * @precision high\n * @id js/code-injection\n * @tags security\n *       external/cwe/cwe-094\n *       external/cwe/cwe-095\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.CodeInjectionQuery\nimport CodeInjectionFlow::PathGraph\n\nfrom CodeInjectionFlow::PathNode source, CodeInjectionFlow::PathNode sink\nwhere CodeInjectionFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, sink.getNode().(Sink).getMessagePrefix() + \" depends on a $@.\",\n  source.getNode(), \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-094/CodeInjection.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-094"
  },
  {
    "name": "ImproperCodeSanitization.ql",
    "path": "javascript/ql/src/Security/CWE-094/ImproperCodeSanitization.ql",
    "language": "javascript",
    "size": 2501,
    "content": "/**\n * @name Improper code sanitization\n * @description Escaping code as HTML does not provide protection against code injection.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 6.1\n * @precision high\n * @id js/bad-code-sanitization\n * @tags security\n *       external/cwe/cwe-094\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.ImproperCodeSanitizationQuery\nprivate import semmle.javascript.heuristics.HeuristicSinks\nprivate import semmle.javascript.security.dataflow.CodeInjectionCustomizations\nimport ImproperCodeSanitizationFlow::PathGraph\n\n/**\n * Gets a type-tracked instance of `RemoteFlowSource` using type-tracker `t`.\n */\nprivate DataFlow::Node remoteFlow(DataFlow::TypeTracker t) {\n  t.start() and\n  result instanceof RemoteFlowSource\n  or\n  exists(DataFlow::TypeTracker t2, DataFlow::Node prev | prev = remoteFlow(t2) |\n    t2 = t.smallstep(prev, result)\n    or\n    TaintTracking::sharedTaintStep(prev, result) and\n    t = t2\n  )\n}\n\n/**\n * Gets a type-tracked reference to a `RemoteFlowSource`.\n */\nprivate DataFlow::Node remoteFlow() { result = remoteFlow(DataFlow::TypeTracker::end()) }\n\n/**\n * Gets a type-back-tracked instance of a code injection sink using type-tracker `t`.\n */\nprivate DataFlow::Node endsInCodeInjectionSink(DataFlow::TypeBackTracker t) {\n  t.start() and\n  (\n    result instanceof CodeInjection::Sink\n    or\n    result instanceof HeuristicCodeInjectionSink and\n    not result instanceof StringOps::ConcatenationRoot // the heuristic CodeInjection sink looks for string-concats, we are not interrested in those here.\n  )\n  or\n  exists(DataFlow::TypeBackTracker t2 | t2 = t.smallstep(result, endsInCodeInjectionSink(t2)))\n}\n\n/**\n * Gets a reference to to a data-flow node that ends in a code injection sink.\n */\nprivate DataFlow::Node endsInCodeInjectionSink() {\n  result = endsInCodeInjectionSink(DataFlow::TypeBackTracker::end())\n}\n\nfrom ImproperCodeSanitizationFlo",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-094/ImproperCodeSanitization.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-094"
  },
  {
    "name": "UnsafeCodeConstruction.ql",
    "path": "javascript/ql/src/Security/CWE-094/UnsafeCodeConstruction.ql",
    "language": "javascript",
    "size": 988,
    "content": "/**\n * @name Unsafe code constructed from library input\n * @description Using externally controlled strings to construct code may allow a malicious\n *              user to execute arbitrary code.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 6.1\n * @precision medium\n * @id js/unsafe-code-construction\n * @tags security\n *       external/cwe/cwe-094\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.UnsafeCodeConstruction::UnsafeCodeConstruction\nimport UnsafeCodeConstructionFlow::PathGraph\n\nfrom\n  UnsafeCodeConstructionFlow::PathNode source, UnsafeCodeConstructionFlow::PathNode sink,\n  Sink sinkNode\nwhere UnsafeCodeConstructionFlow::flowPath(source, sink) and sinkNode = sink.getNode()\nselect sink.getNode(), source, sink,\n  \"This \" + sinkNode.getSinkType() + \" which depends on $@ is later $@.\", source.getNode(),\n  \"library input\", sinkNode.getCodeSink(), \"interpreted as code\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-094/UnsafeCodeConstruction.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-094"
  },
  {
    "name": "UnsafeDynamicMethodAccess.ql",
    "path": "javascript/ql/src/Security/CWE-094/UnsafeDynamicMethodAccess.ql",
    "language": "javascript",
    "size": 780,
    "content": "/**\n * @name Unsafe dynamic method access\n * @description Invoking user-controlled methods on certain objects can lead to remote code execution.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 9.3\n * @precision high\n * @id js/unsafe-dynamic-method-access\n * @tags security\n *       external/cwe/cwe-094\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.UnsafeDynamicMethodAccessQuery\nimport UnsafeDynamicMethodAccessFlow::PathGraph\n\nfrom UnsafeDynamicMethodAccessFlow::PathNode source, UnsafeDynamicMethodAccessFlow::PathNode sink\nwhere UnsafeDynamicMethodAccessFlow::flowPath(source, sink)\nselect sink, source, sink,\n  \"This method is invoked using a $@, which may allow remote code execution.\", source.getNode(),\n  \"user-controlled value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-094/UnsafeDynamicMethodAccess.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-094"
  },
  {
    "name": "ClientExposedCookie.ql",
    "path": "javascript/ql/src/Security/CWE-1004/ClientExposedCookie.ql",
    "language": "javascript",
    "size": 560,
    "content": "/**\n * @name Sensitive server cookie exposed to the client\n * @description Sensitive cookies set by a server can be read by the client if the `httpOnly` flag is not set.\n * @kind problem\n * @problem.severity warning\n * @security-severity 5.0\n * @precision high\n * @id js/client-exposed-cookie\n * @tags security\n *       external/cwe/cwe-1004\n */\n\nimport javascript\n\nfrom CookieWrites::CookieWrite cookie\nwhere\n  cookie.isSensitive() and\n  cookie.isServerSide() and\n  not cookie.isHttpOnly()\nselect cookie, \"Sensitive server cookie is missing 'httpOnly' flag.\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-1004/ClientExposedCookie.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-1004"
  },
  {
    "name": "BadTagFilter.ql",
    "path": "javascript/ql/src/Security/CWE-116/BadTagFilter.ql",
    "language": "javascript",
    "size": 863,
    "content": "/**\n * @name Bad HTML filtering regexp\n * @description Matching HTML tags using regular expressions is hard to do right, and can easily lead to security issues.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.8\n * @precision high\n * @id js/bad-tag-filter\n * @tags correctness\n *       security\n *       external/cwe/cwe-020\n *       external/cwe/cwe-080\n *       external/cwe/cwe-116\n *       external/cwe/cwe-184\n *       external/cwe/cwe-185\n *       external/cwe/cwe-186\n */\n\nprivate import semmle.javascript.security.regexp.RegExpTreeView::RegExpTreeView as TreeView\nimport codeql.regex.nfa.BadTagFilterQuery::Make<TreeView>\n\nfrom HtmlMatchingRegExp regexp, string msg\nwhere msg = min(string m | isBadRegexpFilter(regexp, m) | m order by m.length(), m) // there might be multiple, we arbitrarily pick the shortest one\nselect regexp, msg\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-116/BadTagFilter.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-116"
  },
  {
    "name": "DoubleEscaping.ql",
    "path": "javascript/ql/src/Security/CWE-116/DoubleEscaping.ql",
    "language": "javascript",
    "size": 3940,
    "content": "/**\n * @name Double escaping or unescaping\n * @description When escaping special characters using a meta-character like backslash or\n *              ampersand, the meta-character has to be escaped first to avoid double-escaping,\n *              and conversely it has to be unescaped last to avoid double-unescaping.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.8\n * @precision high\n * @id js/double-escaping\n * @tags correctness\n *       security\n *       external/cwe/cwe-116\n *       external/cwe/cwe-020\n */\n\nimport javascript\n\n/**\n * Gets a predecessor of `nd` that is not an SSA phi node.\n */\nDataFlow::Node getASimplePredecessor(DataFlow::Node nd) {\n  result = nd.getAPredecessor() and\n  not exists(SsaDefinition ssa |\n    ssa = nd.(DataFlow::SsaDefinitionNode).getSsaVariable().getDefinition()\n  |\n    ssa instanceof SsaPhiNode or\n    ssa instanceof SsaVariableCapture\n  )\n}\n\n/**\n * Holds if `metachar` is a meta-character that is used to escape special characters\n * into a form described by regular expression `regex`.\n */\npredicate escapingScheme(string metachar, string regex) {\n  metachar = \"&\" and regex = \"&.+;\"\n  or\n  metachar = \"%\" and regex = \"%.+\"\n  or\n  metachar = \"\\\\\" and regex = \"\\\\\\\\.+\"\n}\n\n/**\n * A call to `String.prototype.replace` that replaces all instances of a pattern.\n */\nclass Replacement extends StringReplaceCall {\n  Replacement() { this.isGlobal() }\n\n  /**\n   * Gets the input of this replacement.\n   */\n  DataFlow::Node getInput() { result = this.getReceiver() }\n\n  /**\n   * Gets the output of this replacement.\n   */\n  DataFlow::SourceNode getOutput() { result = this }\n\n  /**\n   * Holds if this replacement escapes `char` using `metachar`.\n   *\n   * For example, during HTML entity escaping `<` is escaped (to `&lt;`)\n   * using `&`.\n   */\n  predicate escapes(string char, string metachar) {\n    exists(string regexp, string repl |\n      escapingScheme(metachar, regexp) and\n      this.replaces(char, repl) and\n      repl.regexpMatch(reg",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-116/DoubleEscaping.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-116"
  },
  {
    "name": "IncompleteHtmlAttributeSanitization.ql",
    "path": "javascript/ql/src/Security/CWE-116/IncompleteHtmlAttributeSanitization.ql",
    "language": "javascript",
    "size": 1681,
    "content": "/**\n * @name Incomplete HTML attribute sanitization\n * @description Writing incompletely sanitized values to HTML\n *              attribute strings can lead to a cross-site\n *              scripting vulnerability.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 6.1\n * @precision high\n * @id js/incomplete-html-attribute-sanitization\n * @tags security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n *       external/cwe/cwe-020\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.IncompleteHtmlAttributeSanitizationQuery\nimport semmle.javascript.security.IncompleteBlacklistSanitizer\nimport DataFlow::DeduplicatePathGraph<IncompleteHtmlAttributeSanitizationFlow::PathNode, IncompleteHtmlAttributeSanitizationFlow::PathGraph>\n\n/**\n * Gets a pretty string of the dangerous characters for `sink`.\n */\nstring prettyPrintDangerousCharaters(Sink sink) {\n  result =\n    strictconcat(string s |\n      s = describeCharacters(sink.getADangerousCharacter())\n    |\n      s, \", \" order by s\n    ).regexpReplaceAll(\",(?=[^,]+$)\", \" or\")\n}\n\nfrom PathNode source, PathNode sink\nwhere\n  IncompleteHtmlAttributeSanitizationFlow::flowPath(source.getAnOriginalPathNode(),\n    sink.getAnOriginalPathNode())\nselect sink.getNode(), source, sink,\n  // this message is slightly sub-optimal as we do not have an easy way\n  // to get the flow labels that reach the sink, so the message includes\n  // all of them in a disjunction\n  \"Cross-site scripting vulnerability as the output of $@ may contain \" +\n    prettyPrintDangerousCharaters(sink.getNode()) + \" when it reaches this attribute definition.\",\n  source.getNode(), \"this final HTML sanitizer step\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-116/IncompleteHtmlAttributeSanitization.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-116"
  },
  {
    "name": "IncompleteMultiCharacterSanitization.ql",
    "path": "javascript/ql/src/Security/CWE-116/IncompleteMultiCharacterSanitization.ql",
    "language": "javascript",
    "size": 510,
    "content": "/**\n * @name Incomplete multi-character sanitization\n * @description A sanitizer that removes a sequence of characters may reintroduce the dangerous sequence.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.8\n * @precision high\n * @id js/incomplete-multi-character-sanitization\n * @tags correctness\n *       security\n *       external/cwe/cwe-020\n *       external/cwe/cwe-080\n *       external/cwe/cwe-116\n */\n\nimport semmle.javascript.security.IncompleteMultiCharacterSanitizationQuery\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-116/IncompleteMultiCharacterSanitization.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-116"
  },
  {
    "name": "IncompleteSanitization.ql",
    "path": "javascript/ql/src/Security/CWE-116/IncompleteSanitization.ql",
    "language": "javascript",
    "size": 5975,
    "content": "/**\n * @name Incomplete string escaping or encoding\n * @description A string transformer that does not replace or escape all occurrences of a\n *              meta-character may be ineffective.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.8\n * @precision high\n * @id js/incomplete-sanitization\n * @tags correctness\n *       security\n *       external/cwe/cwe-020\n *       external/cwe/cwe-080\n *       external/cwe/cwe-116\n */\n\nimport javascript\n\n/**\n * Gets a character that is commonly used as a meta-character.\n */\nstring metachar() { result = \"'\\\"\\\\&<>\\n\\r\\t*|{}[]%$\".charAt(_) }\n\n/** Gets a string matched by `e` in a `replace` call. */\nstring getAMatchedString(DataFlow::Node e) {\n  result = e.(DataFlow::RegExpCreationNode).getRoot().getAMatchedString()\n  or\n  result = e.getStringValue()\n}\n\n/** Holds if `t` is simple, that is, a union of constants. */\npredicate isSimple(RegExpTerm t) {\n  t instanceof RegExpConstant\n  or\n  isSimple(t.(RegExpGroup).getAChild())\n  or\n  isSimpleCharacterClass(t)\n  or\n  isSimpleAlt(t)\n}\n\n/** Holds if `t` is a non-inverted character class that contains no ranges. */\npredicate isSimpleCharacterClass(RegExpCharacterClass t) {\n  not t.isInverted() and\n  forall(RegExpTerm ch | ch = t.getAChild() | isSimple(ch))\n}\n\n/** Holds if `t` is an alternation of simple terms. */\npredicate isSimpleAlt(RegExpAlt t) { forall(RegExpTerm ch | ch = t.getAChild() | isSimple(ch)) }\n\n/**\n * Holds if `mce` is of the form `x.replace(re, new)`, where `re` is a global\n * regular expression and `new` prefixes the matched string with a backslash.\n */\npredicate isBackslashEscape(StringReplaceCall mce, DataFlow::RegExpCreationNode re) {\n  mce.maybeGlobal() and\n  re = mce.getRegExp() and\n  (\n    // replacement with `\\$&`, `\\$1` or similar\n    mce.getRawReplacement().getStringValue().regexpMatch(\"\\\\\\\\\\\\$(&|\\\\d)\")\n    or\n    // replacement of `c` with `\\c`\n    exists(string c | mce.replaces(c, \"\\\\\" + c))\n  )\n}\n\n/**\n * Holds if data flowing into `nd` ha",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-116/IncompleteSanitization.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-116"
  },
  {
    "name": "UnsafeHtmlExpansion.ql",
    "path": "javascript/ql/src/Security/CWE-116/UnsafeHtmlExpansion.ql",
    "language": "javascript",
    "size": 2079,
    "content": "/**\n * @name Unsafe expansion of self-closing HTML tag\n * @description Using regular expressions to expand self-closing HTML\n *              tags may lead to cross-site scripting vulnerabilities.\n * @kind problem\n * @problem.severity warning\n * @security-severity 6.1\n * @precision very-high\n * @id js/unsafe-html-expansion\n * @tags correctness\n *       security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n */\n\nimport javascript\n\n/**\n * A regular expression that captures the name and content of a\n * self-closing HTML tag such as `<div id='foo'/>`.\n */\nclass SelfClosingTagRecognizer extends DataFlow::RegExpCreationNode {\n  SelfClosingTagRecognizer() {\n    exists(RegExpSequence seq, RegExpGroup name, RegExpGroup content |\n      // `/.../g`\n      RegExp::isGlobal(this.getFlags()) and\n      this.getRoot() = seq.getRootTerm() and\n      // `/<.../`\n      seq.getChild(0).getConstantValue() = \"<\" and\n      // `/...\\/>/`\n      seq.getLastChild().getPredecessor().getConstantValue() = \"/\" and\n      seq.getLastChild().getConstantValue() = \">\" and\n      // `/...((...)...).../`\n      seq.getAChild() = content and\n      content.getNumber() = 1 and\n      name.getNumber() = 2 and\n      name = content.getChild(0).(RegExpSequence).getChild(0) and\n      // `/...(([a-z]+)...).../` or `/...(([a-z][...]*)...).../`\n      exists(RegExpQuantifier quant | name.getAChild*() = quant |\n        quant instanceof RegExpStar or\n        quant instanceof RegExpPlus\n      ) and\n      // `/...((...)[^>]*).../`\n      exists(RegExpCharacterClass lazy |\n        name.getSuccessor().(RegExpStar).getChild(0) = lazy and\n        lazy.isInverted() and\n        lazy.getAChild().getConstantValue() = \">\"\n      )\n    )\n  }\n}\n\nfrom SelfClosingTagRecognizer regexp, StringReplaceCall replace\nwhere\n  regexp.getAReference().flowsTo(replace.getArgument(0)) and\n  replace.getRawReplacement().mayHaveStringValue(\"<$1></$2>\")\nselect replace,\n  \"This self-closing HTML tag expansion invalidates prior sanitization as ",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-116/UnsafeHtmlExpansion.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-116"
  },
  {
    "name": "LogInjection.ql",
    "path": "javascript/ql/src/Security/CWE-117/LogInjection.ql",
    "language": "javascript",
    "size": 695,
    "content": "/**\n * @name Log injection\n * @description Building log entries from user-controlled sources is vulnerable to\n *              insertion of forged log entries by a malicious user.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 6.1\n * @precision medium\n * @id js/log-injection\n * @tags security\n *       external/cwe/cwe-117\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.LogInjectionQuery\nimport LogInjectionFlow::PathGraph\n\nfrom LogInjectionFlow::PathNode source, LogInjectionFlow::PathNode sink\nwhere LogInjectionFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"Log entry depends on a $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-117/LogInjection.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-117"
  },
  {
    "name": "SameSiteNoneCookie.ql",
    "path": "javascript/ql/src/Security/CWE-1275/SameSiteNoneCookie.ql",
    "language": "javascript",
    "size": 698,
    "content": "/**\n * @name Sensitive cookie without SameSite restrictions\n * @description Sensitive cookies where the SameSite attribute is set to \"None\" can\n *              in some cases allow for Cross-Site Request Forgery (CSRF) attacks.\n * @kind problem\n * @problem.severity warning\n * @security-severity 5.0\n * @precision medium\n * @id js/samesite-none-cookie\n * @tags security\n *       external/cwe/cwe-1275\n */\n\nimport javascript\n\nfrom CookieWrites::CookieWrite cookie\nwhere\n  cookie.isSensitive() and\n  cookie.isSecure() and // `js/clear-text-cookie` will report it if the cookie is not secure.\n  cookie.getSameSite().toLowerCase() = \"none\"\nselect cookie, \"Sensitive cookie with SameSite set to 'None'.\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-1275/SameSiteNoneCookie.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-1275"
  },
  {
    "name": "TaintedFormatString.ql",
    "path": "javascript/ql/src/Security/CWE-134/TaintedFormatString.ql",
    "language": "javascript",
    "size": 702,
    "content": "/**\n * @name Use of externally-controlled format string\n * @description Using external input in format strings can lead to garbled output.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 7.3\n * @precision high\n * @id js/tainted-format-string\n * @tags security\n *       external/cwe/cwe-134\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.TaintedFormatStringQuery\nimport TaintedFormatStringFlow::PathGraph\n\nfrom TaintedFormatStringFlow::PathNode source, TaintedFormatStringFlow::PathNode sink\nwhere TaintedFormatStringFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"Format string depends on a $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-134/TaintedFormatString.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-134"
  },
  {
    "name": "CaseSensitiveMiddlewarePath.ql",
    "path": "javascript/ql/src/Security/CWE-178/CaseSensitiveMiddlewarePath.ql",
    "language": "javascript",
    "size": 5122,
    "content": "/**\n * @name Case-sensitive middleware path\n * @description Middleware with case-sensitive paths do not protect endpoints with case-insensitive paths.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.3\n * @precision high\n * @id js/case-sensitive-middleware-path\n * @tags security\n *       external/cwe/cwe-178\n */\n\nimport javascript\n\n/**\n * Converts `s` to upper case, or to lower-case if it was already upper case.\n */\nbindingset[s]\nstring toOtherCase(string s) {\n  if s.regexpMatch(\".*[a-z].*\") then result = s.toUpperCase() else result = s.toLowerCase()\n}\n\nprivate import semmle.javascript.security.regexp.RegExpTreeView::RegExpTreeView as TreeView\nimport codeql.regex.nfa.NfaUtils::Make<TreeView> as NfaUtils\n\n/** Holds if `s` is a relevant regexp term were we want to compute a string that matches the term (for `getCaseSensitiveBypassExample`). */\npredicate isCand(NfaUtils::State s) {\n  s.getRepr() instanceof NfaUtils::RegExpRoot and\n  exists(DataFlow::RegExpCreationNode creation |\n    isCaseSensitiveMiddleware(_, creation, _) and\n    s.getRepr().getRootTerm() = creation.getRoot()\n  )\n}\n\nimport NfaUtils::PrefixConstruction<isCand/1> as Prefix\n\n/** Gets a string matched by `term`. */\nstring getExampleString(RegExpTerm term) {\n  result = Prefix::prefix(any(NfaUtils::State s | s.getRepr() = term))\n}\n\nstring getCaseSensitiveBypassExample(RegExpTerm term) {\n  exists(string byPassExample |\n    byPassExample = getExampleString(term) and\n    result = toOtherCase(byPassExample) and\n    result != byPassExample // getting an byPassExample string is approximate; ensure we got a proper case-change byPassExample\n  )\n}\n\n/**\n * Holds if `setup` has a path-argument `arg` referring to the given case-sensitive `regexp`.\n */\npredicate isCaseSensitiveMiddleware(\n  Routing::RouteSetup setup, DataFlow::RegExpCreationNode regexp, DataFlow::Node arg\n) {\n  exists(DataFlow::MethodCallNode call |\n    setup = Routing::getRouteSetupNode(call) and\n    (\n      setup.definitelyResume",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-178/CaseSensitiveMiddlewarePath.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-178"
  },
  {
    "name": "FileAccessToHttp.ql",
    "path": "javascript/ql/src/Security/CWE-200/FileAccessToHttp.ql",
    "language": "javascript",
    "size": 722,
    "content": "/**\n * @name File data in outbound network request\n * @description Directly sending file data in an outbound network request can indicate unauthorized information disclosure.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 6.5\n * @precision medium\n * @id js/file-access-to-http\n * @tags security\n *       external/cwe/cwe-200\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.FileAccessToHttpQuery\nimport FileAccessToHttpFlow::PathGraph\n\nfrom FileAccessToHttpFlow::PathNode source, FileAccessToHttpFlow::PathNode sink\nwhere FileAccessToHttpFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"Outbound network request depends on $@.\", source.getNode(),\n  \"file data\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-200/FileAccessToHttp.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-200"
  },
  {
    "name": "PrivateFileExposure.ql",
    "path": "javascript/ql/src/Security/CWE-200/PrivateFileExposure.ql",
    "language": "javascript",
    "size": 5313,
    "content": "/**\n * @name Exposure of private files\n * @description Exposing a node_modules folder, or the project folder to the public, can cause exposure\n *              of private information.\n * @kind problem\n * @problem.severity warning\n * @security-severity 6.5\n * @id js/exposure-of-private-files\n * @tags security\n *       external/cwe/cwe-200\n *       external/cwe/cwe-219\n *       external/cwe/cwe-548\n * @precision high\n */\n\nimport javascript\n\n/**\n * Holds if `folder` is a node_modules folder, and at most 1 subdirectory down.\n */\nbindingset[folder]\npredicate isNodeModuleFolder(string folder) {\n  folder.regexpMatch(\"(\\\\.?\\\\.?/)*node_modules(/|(/[a-zA-Z@_-]+/?))?\")\n}\n\n/**\n * Get a data-flow node that represents a path to the node_modules folder represented by the string-literal `path`.\n */\nDataFlow::Node getANodeModulePath(string path) {\n  result.getStringValue() = path and\n  isNodeModuleFolder(path)\n  or\n  exists(DataFlow::CallNode resolve |\n    resolve = DataFlow::moduleMember(\"path\", [\"resolve\", \"join\"]).getACall()\n  |\n    result = resolve and\n    resolve.getLastArgument() = getANodeModulePath(path)\n  )\n  or\n  exists(StringOps::ConcatenationRoot root | root = result |\n    root.getLastLeaf() = getANodeModulePath(path)\n  )\n  or\n  result.getAPredecessor() = getANodeModulePath(path) // local data-flow\n  or\n  exists(string base, string folder |\n    path = base + folder and\n    folder.regexpMatch(\"(/)?[a-zA-Z@_-]+/?\") and\n    base.regexpMatch(\"(\\\\.?\\\\.?/)*node_modules(/)?\") // node_modules, without any sub-folders.\n  |\n    exists(StringOps::ConcatenationRoot root | root = result |\n      root.getNumOperand() = 2 and\n      root.getFirstLeaf() = getANodeModulePath(base) and\n      root.getLastLeaf().getStringValue() = folder\n    )\n    or\n    exists(DataFlow::CallNode resolve |\n      resolve = DataFlow::moduleMember(\"path\", [\"resolve\", \"join\"]).getACall()\n    |\n      result = resolve and\n      resolve.getNumArgument() = 2 and\n      resolve.getArgument(0) = getANodeModulePath(path) ",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-200/PrivateFileExposure.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-200"
  },
  {
    "name": "PostMessageStar.ql",
    "path": "javascript/ql/src/Security/CWE-201/PostMessageStar.ql",
    "language": "javascript",
    "size": 889,
    "content": "/**\n * @name Cross-window communication with unrestricted target origin\n * @description When sending sensitive information to another window using `postMessage`,\n *              the origin of the target window should be restricted to avoid unintentional\n *              information leaks.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 4.3\n * @precision high\n * @id js/cross-window-information-leak\n * @tags security\n *       external/cwe/cwe-201\n *       external/cwe/cwe-359\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.PostMessageStarQuery\nimport PostMessageStarFlow::PathGraph\n\nfrom PostMessageStarFlow::PathNode source, PostMessageStarFlow::PathNode sink\nwhere PostMessageStarFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"$@ is sent to another window without origin restriction.\",\n  source.getNode(), \"Sensitive data\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-201/PostMessageStar.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-201"
  },
  {
    "name": "StackTraceExposure.ql",
    "path": "javascript/ql/src/Security/CWE-209/StackTraceExposure.ql",
    "language": "javascript",
    "size": 895,
    "content": "/**\n * @name Information exposure through a stack trace\n * @description Propagating stack trace information to an external user can\n *              unintentionally reveal implementation details that are useful\n *              to an attacker for developing a subsequent exploit.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 5.4\n * @precision very-high\n * @id js/stack-trace-exposure\n * @tags security\n *       external/cwe/cwe-209\n *       external/cwe/cwe-497\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.StackTraceExposureQuery\nimport StackTraceExposureFlow::PathGraph\n\nfrom StackTraceExposureFlow::PathNode source, StackTraceExposureFlow::PathNode sink\nwhere StackTraceExposureFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"This information exposed to the user depends on $@.\",\n  source.getNode(), \"stack trace information\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-209/StackTraceExposure.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-209"
  },
  {
    "name": "DisablingCertificateValidation.ql",
    "path": "javascript/ql/src/Security/CWE-295/DisablingCertificateValidation.ql",
    "language": "javascript",
    "size": 1829,
    "content": "/**\n * @name Disabling certificate validation\n * @description Disabling cryptographic certificate validation can cause security vulnerabilities.\n * @kind problem\n * @problem.severity error\n * @security-severity 7.5\n * @precision very-high\n * @id js/disabling-certificate-validation\n * @tags security\n *       external/cwe/cwe-295\n *       external/cwe/cwe-297\n */\n\nimport javascript\n\n/** Gets options argument for a potential TLS connection */\nDataFlow::InvokeNode tlsInvocation() {\n  result instanceof ClientRequest\n  or\n  result = DataFlow::moduleMember(\"https\", \"Agent\").getAnInstantiation()\n  or\n  result = DataFlow::moduleMember(\"https\", \"createServer\").getACall()\n  or\n  exists(DataFlow::NewNode new |\n    new = DataFlow::moduleMember(\"tls\", \"TLSSocket\").getAnInstantiation()\n  |\n    result = new or\n    result = new.getAMethodCall(\"renegotiate\")\n  )\n  or\n  result = DataFlow::moduleMember(\"tls\", [\"connect\", \"createServer\"]).getACall()\n}\n\n/** Gets an options object for a TLS connection. */\nDataFlow::ObjectLiteralNode tlsOptions() { result.flowsTo(tlsInvocation().getAnArgument()) }\n\nfrom DataFlow::PropWrite disable\nwhere\n  exists(DataFlow::SourceNode env |\n    env.(ThreatModelSource).getThreatModel() = \"environment\" and\n    disable = env.getAPropertyWrite(\"NODE_TLS_REJECT_UNAUTHORIZED\") and\n    disable.getRhs().mayHaveStringValue(\"0\")\n  )\n  or\n  (\n    disable = tlsOptions().getAPropertyWrite(\"rejectUnauthorized\")\n    or\n    // the same thing, but with API-nodes if they happen to be available\n    exists(API::Node tlsInvk | tlsInvk.getAnInvocation() = tlsInvocation() |\n      disable.getRhs() = tlsInvk.getAParameter().getMember(\"rejectUnauthorized\").asSink()\n    )\n  ) and\n  disable.getRhs().(AnalyzedNode).getTheBooleanValue() = false\nselect disable, \"Disabling certificate validation is strongly discouraged.\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-295/DisablingCertificateValidation.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-295"
  },
  {
    "name": "InsecureDependencyResolution.ql",
    "path": "javascript/ql/src/Security/CWE-300/InsecureDependencyResolution.ql",
    "language": "javascript",
    "size": 747,
    "content": "/**\n * @name Dependency download using unencrypted communication channel\n * @description Using unencrypted protocols to fetch dependencies can leave an application\n *              open to man-in-the-middle attacks.\n * @kind problem\n * @problem.severity warning\n * @security-severity 8.1\n * @precision high\n * @id js/insecure-dependency\n * @tags security\n *       external/cwe/cwe-300\n *       external/cwe/cwe-319\n *       external/cwe/cwe-494\n *       external/cwe/cwe-829\n */\n\nimport javascript\n\nfrom PackageJson pack, JsonString val\nwhere\n  [pack.getDependencies(), pack.getDevDependencies()].getPropValue(_) = val and\n  val.getValue().regexpMatch(\"(http|ftp)://.*\")\nselect val, \"Dependency downloaded using unencrypted communication channel.\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-300/InsecureDependencyResolution.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-300"
  },
  {
    "name": "BuildArtifactLeak.ql",
    "path": "javascript/ql/src/Security/CWE-312/BuildArtifactLeak.ql",
    "language": "javascript",
    "size": 872,
    "content": "/**\n * @name Storage of sensitive information in build artifact\n * @description Including sensitive information in a build artifact can\n *              expose it to an attacker.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 7.5\n * @precision high\n * @id js/build-artifact-leak\n * @tags security\n *       external/cwe/cwe-312\n *       external/cwe/cwe-315\n *       external/cwe/cwe-359\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.BuildArtifactLeakQuery\nimport BuildArtifactLeakFlow::PathGraph\n\nfrom BuildArtifactLeakFlow::PathNode source, BuildArtifactLeakFlow::PathNode sink\nwhere BuildArtifactLeakFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"This creates a build artifact that depends on $@.\",\n  source.getNode(),\n  \"sensitive data returned by\" + source.getNode().(CleartextLogging::Source).describe()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-312/BuildArtifactLeak.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-312"
  },
  {
    "name": "CleartextLogging.ql",
    "path": "javascript/ql/src/Security/CWE-312/CleartextLogging.ql",
    "language": "javascript",
    "size": 1364,
    "content": "/**\n * @name Clear-text logging of sensitive information\n * @description Logging sensitive information without encryption or hashing can\n *              expose it to an attacker.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 7.5\n * @precision high\n * @id js/clear-text-logging\n * @tags security\n *       external/cwe/cwe-312\n *       external/cwe/cwe-359\n *       external/cwe/cwe-532\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.CleartextLoggingQuery\nimport CleartextLoggingFlow::PathGraph\n\n/**\n * Holds if `tl` is used in a browser environment.\n */\npredicate inBrowserEnvironment(TopLevel tl) {\n  tl instanceof InlineScript\n  or\n  tl instanceof CodeInAttribute\n  or\n  exists(GlobalVarAccess e | e.getTopLevel() = tl | e.getName() = \"window\")\n  or\n  exists(Module m | inBrowserEnvironment(m) |\n    tl = m.getAnImportedModule() or\n    m = tl.(Module).getAnImportedModule()\n  )\n}\n\nfrom CleartextLoggingFlow::PathNode source, CleartextLoggingFlow::PathNode sink\nwhere\n  CleartextLoggingFlow::flowPath(source, sink) and\n  // ignore logging to the browser console (even though it is not a good practice)\n  not inBrowserEnvironment(sink.getNode().asExpr().getTopLevel())\nselect sink.getNode(), source, sink, \"This logs sensitive data returned by $@ as clear text.\",\n  source.getNode(), source.getNode().(Source).describe()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-312/CleartextLogging.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-312"
  },
  {
    "name": "CleartextStorage.ql",
    "path": "javascript/ql/src/Security/CWE-312/CleartextStorage.ql",
    "language": "javascript",
    "size": 840,
    "content": "/**\n * @name Clear text storage of sensitive information\n * @description Sensitive information stored without encryption or hashing can expose it to an\n *              attacker.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 7.5\n * @precision high\n * @id js/clear-text-storage-of-sensitive-data\n * @tags security\n *       external/cwe/cwe-312\n *       external/cwe/cwe-315\n *       external/cwe/cwe-359\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.CleartextStorageQuery\nimport ClearTextStorageFlow::PathGraph\n\nfrom ClearTextStorageFlow::PathNode source, ClearTextStorageFlow::PathNode sink\nwhere ClearTextStorageFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"This stores sensitive data returned by $@ as clear text.\",\n  source.getNode(), source.getNode().(Source).describe()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-312/CleartextStorage.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-312"
  },
  {
    "name": "PasswordInConfigurationFile.ql",
    "path": "javascript/ql/src/Security/CWE-313/PasswordInConfigurationFile.ql",
    "language": "javascript",
    "size": 1195,
    "content": "/**\n * @name Password in configuration file\n * @description Storing unencrypted passwords in configuration files is unsafe.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.5\n * @precision low\n * @id js/password-in-configuration-file\n * @tags security\n *       external/cwe/cwe-256\n *       external/cwe/cwe-260\n *       external/cwe/cwe-313\n *       external/cwe/cwe-522\n */\n\nimport javascript\nimport semmle.javascript.security.PasswordInConfigurationFileQuery\n\nfrom string key, string val, Locatable valElement, string pwd\nwhere\n  config(key, val, valElement) and\n  val != \"\" and\n  (\n    key.toLowerCase() = \"password\" and\n    pwd = val and\n    // exclude interpolations of environment variables\n    not val.regexpMatch(\"\\\\$.*|%.*%\") and\n    not PasswordHeuristics::isDummyPassword(val)\n    or\n    not key.toLowerCase() = [\"readme\", \"run\"] and\n    // look for `password=...`, but exclude `password=;`, `password=\"$(...)\"`, `password=foo()`\n    // `password=%s` and `password==`\n    pwd = val.regexpCapture(\"(?is).*password\\\\s*=\\\\s*(?!;|\\\"?[$`]|%s|=|\\\\w+\\\\(.+\\\\))(\\\\S+).*\", 1)\n  )\nselect valElement.(FirstLineOf), \"Hard-coded password '\" + pwd + \"' in configuration file.\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-313/PasswordInConfigurationFile.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-313"
  },
  {
    "name": "InsufficientKeySize.ql",
    "path": "javascript/ql/src/Security/CWE-326/InsufficientKeySize.ql",
    "language": "javascript",
    "size": 945,
    "content": "/**\n * @name Use of a weak cryptographic key\n * @description Using a weak cryptographic key can allow an attacker to compromise security.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.5\n * @precision high\n * @id js/insufficient-key-size\n * @tags security\n *       external/cwe/cwe-326\n */\n\nimport javascript\n\nfrom CryptographicKeyCreation key, int size, string msg, string algo\nwhere\n  size = key.getSize() and\n  (\n    algo = key.getAlgorithm() + \" \"\n    or\n    not exists(key.getAlgorithm()) and algo = \"\"\n  ) and\n  (\n    size < 128 and\n    key.isSymmetricKey() and\n    msg =\n      \"Creation of an symmetric \" + algo + \"key uses \" + size +\n        \" bits, which is below 128 and considered breakable.\"\n    or\n    size < 2048 and\n    not key.isSymmetricKey() and\n    msg =\n      \"Creation of an asymmetric \" + algo + \"key uses \" + size +\n        \" bits, which is below 2048 and considered breakable.\"\n  )\nselect key, msg\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-326/InsufficientKeySize.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-326"
  },
  {
    "name": "BadRandomness.ql",
    "path": "javascript/ql/src/Security/CWE-327/BadRandomness.ql",
    "language": "javascript",
    "size": 7032,
    "content": "/**\n * @name Creating biased random numbers from a cryptographically secure source\n * @description Some mathematical operations on random numbers can cause bias in\n *              the results and compromise security.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.5\n * @precision high\n * @id js/biased-cryptographic-random\n * @tags security\n *       external/cwe/cwe-327\n */\n\nimport javascript\nprivate import semmle.javascript.dataflow.internal.StepSummary\nprivate import semmle.javascript.security.dataflow.InsecureRandomnessCustomizations\nprivate import semmle.javascript.dataflow.InferredTypes\n\n/**\n * Gets a number that is a power of 2.\n */\nprivate int powerOfTwo() {\n  result = 1\n  or\n  result = 2 * powerOfTwo() and\n  not result < 0\n}\n\n/**\n * Gets a node that has value 2^n for some n.\n */\nprivate DataFlow::Node isPowerOfTwo() {\n  result.getIntValue() = powerOfTwo()\n  or\n  // Getting around the 32 bit ints in QL. These are some hex values of the form 0x10000000\n  result.asExpr().(NumberLiteral).getValue() =\n    [\"281474976710656\", \"17592186044416\", \"1099511627776\", \"68719476736\", \"4294967296\"]\n  or\n  result = isPowerOfTwo().getASuccessor()\n}\n\n/**\n * Gets a node that has value (2^n)-1 for some n.\n */\nprivate DataFlow::Node isPowerOfTwoMinusOne() {\n  result.getIntValue() = powerOfTwo() - 1\n  or\n  // Getting around the 32 bit ints in QL. These are some hex values of the form 0xfffffff\n  result.asExpr().(NumberLiteral).getValue() =\n    [\"281474976710655\", \"17592186044415\", \"1099511627775\", \"68719476735\", \"4294967295\"]\n  or\n  result = isPowerOfTwoMinusOne().getASuccessor()\n}\n\n/**\n * Gets the pseudo-property used to track elements inside a Buffer.\n * The API for `Set` is close enough to the API for `Buffer` that we can reuse the type-tracking steps.\n */\nprivate string prop() { result = DataFlow::PseudoProperties::setElement() }\n\n/**\n * Gets a reference to a cryptographically secure random number produced by `source` and type tracked using `t`.\n */\nprivat",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-327/BadRandomness.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-327"
  },
  {
    "name": "BrokenCryptoAlgorithm.ql",
    "path": "javascript/ql/src/Security/CWE-327/BrokenCryptoAlgorithm.ql",
    "language": "javascript",
    "size": 1091,
    "content": "/**\n * @name Use of a broken or weak cryptographic algorithm\n * @description Using broken or weak cryptographic algorithms can compromise security.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 7.5\n * @precision high\n * @id js/weak-cryptographic-algorithm\n * @tags security\n *       external/cwe/cwe-327\n *       external/cwe/cwe-328\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.BrokenCryptoAlgorithmQuery\nimport semmle.javascript.security.SensitiveActions\nimport BrokenCryptoAlgorithmFlow::PathGraph\n\nfrom\n  BrokenCryptoAlgorithmFlow::PathNode source, BrokenCryptoAlgorithmFlow::PathNode sink,\n  Source sourceNode, Sink sinkNode\nwhere\n  BrokenCryptoAlgorithmFlow::flowPath(source, sink) and\n  sourceNode = source.getNode() and\n  sinkNode = sink.getNode() and\n  not sourceNode instanceof CleartextPasswordExpr // flagged by js/insufficient-password-hash\nselect sinkNode, source, sink, \"$@ depends on $@.\", sinkNode.getInitialization(),\n  \"A broken or weak cryptographic algorithm\", sourceNode,\n  \"sensitive data from \" + sourceNode.describe()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-327/BrokenCryptoAlgorithm.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-327"
  },
  {
    "name": "InsecureRandomness.ql",
    "path": "javascript/ql/src/Security/CWE-338/InsecureRandomness.ql",
    "language": "javascript",
    "size": 870,
    "content": "/**\n * @name Insecure randomness\n * @description Using a cryptographically weak pseudo-random number generator to generate a\n *              security-sensitive value may allow an attacker to predict what value will\n *              be generated.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 7.8\n * @precision high\n * @id js/insecure-randomness\n * @tags security\n *       external/cwe/cwe-338\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.InsecureRandomnessQuery\nimport InsecureRandomnessFlow::PathGraph\n\nfrom InsecureRandomnessFlow::PathNode source, InsecureRandomnessFlow::PathNode sink\nwhere InsecureRandomnessFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink,\n  \"This uses a cryptographically insecure random number generated at $@ in a security context.\",\n  source.getNode(), source.getNode().toString()\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-338/InsecureRandomness.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-338"
  },
  {
    "name": "CorsMisconfigurationForCredentials.ql",
    "path": "javascript/ql/src/Security/CWE-346/CorsMisconfigurationForCredentials.ql",
    "language": "javascript",
    "size": 888,
    "content": "/**\n * @name CORS misconfiguration for credentials transfer\n * @description Misconfiguration of CORS HTTP headers allows for leaks of secret credentials.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 7.5\n * @precision high\n * @id js/cors-misconfiguration-for-credentials\n * @tags security\n *       external/cwe/cwe-346\n *       external/cwe/cwe-639\n *       external/cwe/cwe-942\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.CorsMisconfigurationForCredentialsQuery\nimport CorsMisconfigurationFlow::PathGraph\n\nfrom CorsMisconfigurationFlow::PathNode source, CorsMisconfigurationFlow::PathNode sink\nwhere CorsMisconfigurationFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"$@ leak vulnerability due to a $@.\",\n  sink.getNode().(Sink).getCredentialsHeader(), \"Credential\", source.getNode(),\n  \"misconfigured CORS header value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-346/CorsMisconfigurationForCredentials.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-346"
  },
  {
    "name": "MissingJWTKeyVerification.ql",
    "path": "javascript/ql/src/Security/CWE-347/MissingJWTKeyVerification.ql",
    "language": "javascript",
    "size": 686,
    "content": "/**\n * @name JWT missing secret or public key verification\n * @description The application does not verify the JWT payload with a cryptographic secret or public key.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.0\n * @precision high\n * @id js/jwt-missing-verification\n * @tags security\n *       external/cwe/cwe-347\n */\n\nimport javascript\nimport semmle.javascript.RestrictedLocations\n\nfrom DataFlow::CallNode call\nwhere\n  call = DataFlow::moduleMember(\"jsonwebtoken\", \"verify\").getACall() and\n  call.getArgument(1).analyze().getTheBooleanValue() = false\nselect call.getArgument(1),\n  \"This argument disables the integrity enforcement of the token verification.\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-347/MissingJWTKeyVerification.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-347"
  },
  {
    "name": "MissingCsrfMiddleware.ql",
    "path": "javascript/ql/src/Security/CWE-352/MissingCsrfMiddleware.ql",
    "language": "javascript",
    "size": 7774,
    "content": "/**\n * @name Missing CSRF middleware\n * @description Using cookies without CSRF protection may allow malicious websites to\n *              submit requests on behalf of the user.\n * @kind problem\n * @problem.severity error\n * @security-severity 8.8\n * @precision high\n * @id js/missing-token-validation\n * @tags security\n *       external/cwe/cwe-352\n */\n\nimport javascript\n\n/** Gets a property name of `req` which refers to data usually derived from cookie data. */\nstring cookieProperty() { result = \"session\" or result = \"cookies\" or result = \"user\" }\n\n/**\n * Holds if `handler` uses cookies.\n */\npredicate isRouteHandlerUsingCookies(Routing::RouteHandler handler) {\n  exists(DataFlow::PropRef value |\n    value = handler.getAParameter().ref().getAPropertyRead(cookieProperty()).getAPropertyReference() and\n    // Ignore accesses to values that are part of a CSRF or captcha check\n    not value.getPropertyName().regexpMatch(\"(?i).*(csrf|xsrf|captcha).*\") and\n    // Ignore calls like `req.session.save()`\n    not value = any(DataFlow::InvokeNode call).getCalleeNode()\n  )\n}\n\n/**\n * Holds if `route` is preceded by the cookie middleware `cookie`.\n *\n * A router handler following after cookie parsing is assumed to depend on\n * cookies, and thus require CSRF protection.\n */\npredicate hasCookieMiddleware(Routing::Node route, Http::CookieMiddlewareInstance cookie) {\n  route.isGuardedBy(cookie)\n}\n\n/**\n * Gets an expression that creates a route handler which protects against CSRF attacks.\n *\n * Any route handler registered downstream from this type of route handler will\n * be considered protected.\n *\n * For example:\n * ```\n * let csurf = require('csurf');\n * let csrfProtector = csurf();\n *\n * app.post('/changePassword', csrfProtector, function (req, res) {\n *   // protected from CSRF\n * })\n * ```\n */\nDataFlow::SourceNode csrfMiddlewareCreation() {\n  exists(DataFlow::SourceNode callee | result = callee.getACall() |\n    callee = DataFlow::moduleImport([\"csurf\", \"tiny-csrf\"])\n    or\n    cal",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-352/MissingCsrfMiddleware.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-352"
  },
  {
    "name": "FileSystemRace.ql",
    "path": "javascript/ql/src/Security/CWE-367/FileSystemRace.ql",
    "language": "javascript",
    "size": 3392,
    "content": "/**\n * @name Potential file system race condition\n * @description Separately checking the state of a file before operating\n *              on it may allow an attacker to modify the file between\n *              the two operations.\n * @kind problem\n * @problem.severity warning\n * @security-severity 7.7\n * @precision medium\n * @id js/file-system-race\n * @tags security\n *       external/cwe/cwe-367\n */\n\nimport javascript\n\n/**\n * A call that checks a property of some file.\n */\nclass FileCheck extends DataFlow::CallNode {\n  string member;\n\n  FileCheck() {\n    member =\n      [\n        \"open\", \"openSync\", \"exists\", \"existsSync\", \"stat\", \"statSync\", \"lstat\", \"lstatSync\",\n        \"fstat\", \"fstatSync\", \"access\", \"accessSync\"\n      ] and\n    this = NodeJSLib::FS::moduleMember(member).getACall()\n  }\n\n  DataFlow::Node getPathArgument() { result = this.getArgument(0) }\n\n  /** Holds if this call is a simple existence check for a file. */\n  predicate isExistsCheck() { member = [\"exists\", \"existsSync\"] }\n}\n\n/**\n * A call that modifies or otherwise interacts with a file.\n */\nclass FileUse extends DataFlow::CallNode {\n  string member;\n\n  FileUse() {\n    member =\n      [\n        // these are the six methods that accept file paths and file descriptors\n        \"readFile\", \"readFileSync\", \"writeFile\", \"writeFileSync\", \"appendFile\", \"appendFileSync\",\n        // don't use \"open\" after e.g. \"access\"\n        \"open\", \"openSync\"\n      ] and\n    this = NodeJSLib::FS::moduleMember(member).getACall()\n  }\n\n  DataFlow::Node getPathArgument() { result = this.getArgument(0) }\n\n  /** Holds if this call reads from a file. */\n  predicate isFileRead() { member = [\"readFile\", \"readFileSync\"] }\n}\n\n/**\n * Gets a reference to a file-handle from a call to `open` or `openSync`.\n */\nDataFlow::SourceNode getAFileHandle(DataFlow::TypeTracker t) {\n  t.start() and\n  (\n    result = NodeJSLib::FS::moduleMember(\"openSync\").getACall()\n    or\n    result =\n      NodeJSLib::FS::moduleMember(\"open\")\n          .getACall()\n   ",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-367/FileSystemRace.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-367"
  },
  {
    "name": "InsecureTemporaryFile.ql",
    "path": "javascript/ql/src/Security/CWE-377/InsecureTemporaryFile.ql",
    "language": "javascript",
    "size": 793,
    "content": "/**\n * @name Insecure temporary file\n * @description Creating a temporary file that is accessible by other users can\n * lead to information disclosure and sometimes remote code execution.\n * @kind path-problem\n * @id js/insecure-temporary-file\n * @problem.severity warning\n * @security-severity 7.0\n * @precision medium\n * @tags external/cwe/cwe-377\n *       external/cwe/cwe-378\n *       security\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.InsecureTemporaryFileQuery\nimport InsecureTemporaryFileFlow::PathGraph\n\nfrom InsecureTemporaryFileFlow::PathNode source, InsecureTemporaryFileFlow::PathNode sink\nwhere InsecureTemporaryFileFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"Insecure creation of file in $@.\", source.getNode(),\n  \"the os temp dir\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-377/InsecureTemporaryFile.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-377"
  },
  {
    "name": "SessionFixation.ql",
    "path": "javascript/ql/src/Security/CWE-384/SessionFixation.ql",
    "language": "javascript",
    "size": 1504,
    "content": "/**\n * @name Failure to abandon session\n * @description Reusing an existing session as a different user could allow\n *              an attacker to access someone else's account by using\n *              their session.\n * @kind problem\n * @problem.severity warning\n * @security-severity 5\n * @precision medium\n * @id js/session-fixation\n * @tags security\n *       external/cwe/cwe-384\n */\n\nimport javascript\n\n/**\n * Holds if `setup` uses express-session (or similar) to log in a user.\n */\npragma[inline]\npredicate isLoginSetup(Express::RouteSetup setup) {\n  // some path that contains \"login\" with a write to `req.session`\n  setup.getPath().matches(\"%login%\") and\n  exists(\n    setup\n        .getARouteHandler()\n        .(Express::RouteHandler)\n        .getARequestSource()\n        .ref()\n        .getAPropertyRead(\"session\")\n        .getAPropertyWrite()\n  )\n  // passport used to be recognized, but they have since added built-in protection against session fixation\n}\n\n/**\n * Holds if `setup` regenerates its session using `req.session.regenerate`.\n */\npragma[inline]\npredicate regeneratesSession(Express::RouteSetup setup) {\n  exists(\n    setup\n        .getARouteHandler()\n        .(Express::RouteHandler)\n        .getARequestSource()\n        .ref()\n        .getAPropertyRead(\"session\")\n        .getAPropertyRead(\"regenerate\")\n  )\n}\n\nfrom Express::RouteSetup setup\nwhere\n  isLoginSetup(setup) and\n  not regeneratesSession(setup)\nselect setup, \"Route handler does not invalidate session following login.\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-384/SessionFixation.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-384"
  },
  {
    "name": "DeepObjectResourceExhaustion.ql",
    "path": "javascript/ql/src/Security/CWE-400/DeepObjectResourceExhaustion.ql",
    "language": "javascript",
    "size": 966,
    "content": "/**\n * @name Resources exhaustion from deep object traversal\n * @description Processing user-controlled object hierarchies inefficiently can lead to denial of service.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 7.5\n * @precision high\n * @id js/resource-exhaustion-from-deep-object-traversal\n * @tags security\n *       external/cwe/cwe-400\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.DeepObjectResourceExhaustionQuery\nimport DataFlow::DeduplicatePathGraph<DeepObjectResourceExhaustionFlow::PathNode, DeepObjectResourceExhaustionFlow::PathGraph>\n\nfrom PathNode source, PathNode sink, DataFlow::Node link, string reason\nwhere\n  DeepObjectResourceExhaustionFlow::flowPath(source.getAnOriginalPathNode(),\n    sink.getAnOriginalPathNode()) and\n  sink.getNode().(Sink).hasReason(link, reason)\nselect sink, source, sink, \"Denial of service caused by processing $@ with $@.\", source.getNode(),\n  \"user input\", link, reason\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-400/DeepObjectResourceExhaustion.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-400"
  },
  {
    "name": "RemotePropertyInjection.ql",
    "path": "javascript/ql/src/Security/CWE-400/RemotePropertyInjection.ql",
    "language": "javascript",
    "size": 806,
    "content": "/**\n * @name Remote property injection\n * @description Allowing writes to arbitrary properties of an object may lead to\n *              denial-of-service attacks.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 7.5\n * @precision medium\n * @id js/remote-property-injection\n * @tags security\n *       external/cwe/cwe-250\n *       external/cwe/cwe-400\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.RemotePropertyInjectionQuery\nimport RemotePropertyInjectionFlow::PathGraph\n\nfrom RemotePropertyInjectionFlow::PathNode source, RemotePropertyInjectionFlow::PathNode sink\nwhere RemotePropertyInjectionFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, sink.getNode().(Sink).getMessage() + \" depends on a $@.\",\n  source.getNode(), \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-400/RemotePropertyInjection.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-400"
  },
  {
    "name": "MissingXFrameOptions.ql",
    "path": "javascript/ql/src/Security/CWE-451/MissingXFrameOptions.ql",
    "language": "javascript",
    "size": 680,
    "content": "/**\n * @name Missing X-Frame-Options HTTP header\n * @description If the 'X-Frame-Options' setting is not provided, a malicious user may be able to\n *              overlay their own UI on top of the site by using an iframe.\n * @kind problem\n * @problem.severity error\n * @security-severity 7.5\n * @precision low\n * @id js/missing-x-frame-options\n * @tags security\n *       external/cwe/cwe-451\n *       external/cwe/cwe-829\n */\n\nimport javascript\nimport semmle.javascript.frameworks.HTTP\n\nfrom Http::ServerDefinition server\nwhere not exists(server.getARouteHandler().getAResponseHeader(\"x-frame-options\"))\nselect server, \"This server never sets the 'X-Frame-Options' HTTP header.\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-451/MissingXFrameOptions.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-451"
  },
  {
    "name": "UnsafeDeserialization.ql",
    "path": "javascript/ql/src/Security/CWE-502/UnsafeDeserialization.ql",
    "language": "javascript",
    "size": 750,
    "content": "/**\n * @name Deserialization of user-controlled data\n * @description Deserializing user-controlled data may allow attackers to\n *              execute arbitrary code.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 9.8\n * @precision high\n * @id js/unsafe-deserialization\n * @tags security\n *       external/cwe/cwe-502\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.UnsafeDeserializationQuery\nimport UnsafeDeserializationFlow::PathGraph\n\nfrom UnsafeDeserializationFlow::PathNode source, UnsafeDeserializationFlow::PathNode sink\nwhere UnsafeDeserializationFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"Unsafe deserialization depends on a $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-502/UnsafeDeserialization.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-502"
  },
  {
    "name": "HardcodedDataInterpretedAsCode.ql",
    "path": "javascript/ql/src/Security/CWE-506/HardcodedDataInterpretedAsCode.ql",
    "language": "javascript",
    "size": 973,
    "content": "/**\n * @name Hard-coded data interpreted as code\n * @description Transforming hard-coded data (such as hexadecimal constants) into code\n *              to be executed is a technique often associated with backdoors and should\n *              be avoided.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 9.1\n * @precision medium\n * @id js/hardcoded-data-interpreted-as-code\n * @tags security\n *       external/cwe/cwe-506\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.HardcodedDataInterpretedAsCodeQuery\nimport DataFlow::DeduplicatePathGraph<HardcodedDataInterpretedAsCodeFlow::PathNode, HardcodedDataInterpretedAsCodeFlow::PathGraph>\n\nfrom PathNode source, PathNode sink\nwhere\n  HardcodedDataInterpretedAsCodeFlow::flowPath(source.getAnOriginalPathNode(),\n    sink.getAnOriginalPathNode())\nselect sink.getNode(), source, sink,\n  \"$@ is interpreted as \" + sink.getNode().(Sink).getKind() + \".\", source.getNode(),\n  \"Hard-coded data\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-506/HardcodedDataInterpretedAsCode.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-506"
  },
  {
    "name": "SensitiveGetQuery.ql",
    "path": "javascript/ql/src/Security/CWE-598/SensitiveGetQuery.ql",
    "language": "javascript",
    "size": 899,
    "content": "/**\n * @name Sensitive data read from GET request\n * @description Placing sensitive data in a GET request increases the risk of\n *              the data being exposed to an attacker.\n * @kind problem\n * @problem.severity warning\n * @security-severity 6.5\n * @precision high\n * @id js/sensitive-get-query\n * @tags security\n *       external/cwe/cwe-598\n */\n\nimport javascript\n\nfrom\n  Routing::RouteSetup setup, Routing::RouteHandler handler, Http::RequestInputAccess input,\n  SensitiveNode sensitive\nwhere\n  setup.getOwnHttpMethod() = \"GET\" and\n  setup.getAChild+() = handler and\n  input.getRouteHandler() = handler.getFunction() and\n  input.getKind() = \"parameter\" and\n  input.(DataFlow::SourceNode).flowsTo(sensitive) and\n  not sensitive.getClassification() = SensitiveDataClassification::id()\nselect input, \"$@ for GET requests uses query parameter as sensitive data.\", handler,\n  \"Route handler\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-598/SensitiveGetQuery.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-598"
  },
  {
    "name": "ClientSideUrlRedirect.ql",
    "path": "javascript/ql/src/Security/CWE-601/ClientSideUrlRedirect.ql",
    "language": "javascript",
    "size": 902,
    "content": "/**\n * @name Client-side URL redirect\n * @description Client-side URL redirection based on unvalidated user input\n *              may cause redirection to malicious web sites.\n * @kind path-problem\n * @problem.severity error\n * @security-severity 6.1\n * @precision high\n * @id js/client-side-unvalidated-url-redirection\n * @tags security\n *       external/cwe/cwe-079\n *       external/cwe/cwe-116\n *       external/cwe/cwe-601\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.ClientSideUrlRedirectQuery\nimport DataFlow::DeduplicatePathGraph<ClientSideUrlRedirectFlow::PathNode, ClientSideUrlRedirectFlow::PathGraph>\n\nfrom PathNode source, PathNode sink\nwhere\n  ClientSideUrlRedirectFlow::flowPath(source.getAnOriginalPathNode(), sink.getAnOriginalPathNode())\nselect sink.getNode(), source, sink, \"Untrusted URL redirection depends on a $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-601/ClientSideUrlRedirect.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-601"
  },
  {
    "name": "ServerSideUrlRedirect.ql",
    "path": "javascript/ql/src/Security/CWE-601/ServerSideUrlRedirect.ql",
    "language": "javascript",
    "size": 779,
    "content": "/**\n * @name Server-side URL redirect\n * @description Server-side URL redirection based on unvalidated user input\n *              may cause redirection to malicious web sites.\n * @kind path-problem\n * @problem.severity warning\n * @security-severity 6.1\n * @id js/server-side-unvalidated-url-redirection\n * @tags security\n *       external/cwe/cwe-601\n * @precision high\n */\n\nimport javascript\nimport semmle.javascript.security.dataflow.ServerSideUrlRedirectQuery\nimport ServerSideUrlRedirectFlow::PathGraph\n\nfrom ServerSideUrlRedirectFlow::PathNode source, ServerSideUrlRedirectFlow::PathNode sink\nwhere ServerSideUrlRedirectFlow::flowPath(source, sink)\nselect sink.getNode(), source, sink, \"Untrusted URL redirection depends on a $@.\", source.getNode(),\n  \"user-provided value\"\n",
    "download_url": "https://raw.githubusercontent.com/github/codeql/main/javascript/ql/src/Security/CWE-601/ServerSideUrlRedirect.ql",
    "source": "GitHub CodeQL (Official Repository)",
    "security_category": "CWE-601"
  }
]